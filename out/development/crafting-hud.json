{"slots":{"0":{"name":"schemCostDb","class":"DataBankUnit","type":{"events":[],"methods":[]}},"1":{"name":"talentsDb","class":"DataBankUnit","type":{"events":[],"methods":[]}},"2":{"name":"oresCostDb","class":"DataBankUnit","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}}},"handlers":[{"key":1,"filter":{"slotKey":-5,"signature":"onStart()","args":[]},"code":";(function()\nlocal a={}local b=0;function library.addEventHandlers(c)if not c or c.onEvent and c.triggerEvent then return false end;b=b+1;a[b]=c;local d,e,f='table','function','thread'if d~=type(c)then error('You can only add event handlers to table objects!')end;local g={}local function h(c)local i=type(c)return e==i or d==i and h(getmetatable(c).__call)or f==i end;c.onEvent=function(self,j,k,l)if not h(k)then error('Event handler must be a function, a callable object or a thread!')end;l=l or self;if d~=type(l)then error('The value of self must be a table!')end;if not g[j]then g[j]={_=0}end;local m=f==type(k)and function(...)coroutine.resume(k,...)end or k;local k=g[j]local n=k._+1;k[n]={m,l}k._=n;return n end;c.clearEvent=function(self,j,o)if g[j]and g[j][o]then g[j][o]=nil end end;c.clearAllEvents=function(self)g={}end;c.triggerEvent=function(self,j,...)local p=g[j]if p then for q=1,p._ do local k=p[q]if k then k[1](k[2],...)end end end end;return true end;function library.clearAllEventHandlers()for q=1,b do local c=a[q]if c and c.clearAllEvents then c:clearAllEvents()end end end\nend)()"},{"key":2,"filter":{"slotKey":-5,"signature":"onStart()","args":[]},"code":";(function()\nlocal a=DULibrary or{}function a.getLinks(b,c)local d={}if not b then b={}end;for e,f in pairs(unit.getOutPlugs())do local g=unit[f.name]if'table'==type(g)and'function'==type(g.getClass)then local h=true;for i,j in pairs(b)do if not('function'==type(g[i])and j==g[i]():sub(1,#j))then h=false;break end end;if h then if c then table.insert(d,g)else d[f.name]=g end end end end;return d end;function a.getLinksByClass(k,c)return a.getLinks({getClass=k},c)end;function a.getLinkByClass(k)return a.getLinksByClass(k,true)[1]end;function a.getCoreUnit()return a.getLinkByClass('CoreUnit')end;function a.getLinkByName(l)local m=a.getCoreUnit()if not m then error('getLinkByName requires a linked CoreUnit to work')end;local d=a.getLinks()for n,o in pairs(d)do if l==m.getElementNameById(o.getLocalId())then return o end end end\nend)()"},{"key":3,"filter":{"slotKey":-5,"signature":"onStart()","args":[]},"code":"package.preload['du-crafting-hud:du_lib/utils/du_constants.lua']=(function()\n---@class UnitEvents\r\nUNIT_EVENTS = {}\r\nUNIT_EVENTS.START = 'onStart'\r\nUNIT_EVENTS.STOP = 'onStop'\r\n\r\n---@class SystemEvents\r\nSYSTEM_EVENTS = {}\r\nSYSTEM_EVENTS.ACTION_LOOP = 'onActionLoop'\r\nSYSTEM_EVENTS.ACTION_START = 'onActionStart'\r\nSYSTEM_EVENTS.ACTION_STOP = 'onActionStop'\r\nSYSTEM_EVENTS.INPUT_TEXT = 'onInputText'\r\nSYSTEM_EVENTS.UPDATE = 'onUpdate'\r\n\r\n---@class LuaActions\r\nLUA_ACTIONS = {}\r\nLUA_ACTIONS.FORWARD = \"forward\"\r\nLUA_ACTIONS.BACKWARD = \"backward\"\r\nLUA_ACTIONS.YAWLEFT = \"yawleft\"\r\nLUA_ACTIONS.YAWRIGHT = \"yawright\"\r\nLUA_ACTIONS.STRAFELEFT = \"strafeleft\"\r\nLUA_ACTIONS.STRAFERIGHT = \"straferight\"\r\nLUA_ACTIONS.LEFT = \"left\"\r\nLUA_ACTIONS.RIGHT = \"right\"\r\nLUA_ACTIONS.UP = \"up\"\r\nLUA_ACTIONS.DOWN = \"down\"\r\nLUA_ACTIONS.GROUNDALTITUDEUP = \"groundaltitudeup\"\r\nLUA_ACTIONS.GROUNDALTITUDEDOWN = \"groundaltitudedown\"\r\nLUA_ACTIONS.LALT = \"lalt\"\r\nLUA_ACTIONS.LSHIFT = \"lshift\"\r\nLUA_ACTIONS.GEAR = \"gear\"\r\nLUA_ACTIONS.LIGHT = \"light\"\r\nLUA_ACTIONS.BRAKE = \"brake\"\r\nLUA_ACTIONS.OPTION1 = \"option1\"\r\nLUA_ACTIONS.OPTION2 = \"option2\"\r\nLUA_ACTIONS.OPTION3 = \"option3\"\r\nLUA_ACTIONS.OPTION4 = \"option4\"\r\nLUA_ACTIONS.OPTION5 = \"option5\"\r\nLUA_ACTIONS.OPTION6 = \"option6\"\r\nLUA_ACTIONS.OPTION7 = \"option7\"\r\nLUA_ACTIONS.OPTION8 = \"option8\"\r\nLUA_ACTIONS.OPTION9 = \"option9\"\r\nLUA_ACTIONS.LEFTMOUSE = \"leftmouse\"\r\nLUA_ACTIONS.STOPENGINES = \"stopengines\"\r\nLUA_ACTIONS.SPEEDUP = \"speedup\"\r\nLUA_ACTIONS.SPEEDDOWN = \"speeddown\"\r\nLUA_ACTIONS.ANTIGRAVITY = \"antigravity\"\r\nLUA_ACTIONS.BOOSTER = \"booster\"\nend)\npackage.preload['du-crafting-hud:du_lib/utils/duluac.lua']=(function()\n---@class DuLuacUtils\r\nDuLuacUtils = {}\r\n\r\n---@param target DuLuacElement\r\n---@param event string\r\n---@param handlers table<string, function>\r\nfunction DuLuacUtils.addListener(target, event, handlers)\r\n    target:onEvent(event, DuLuacUtils.createHandler(handlers))\r\nend\r\n\r\nfunction DuLuacUtils.createHandler(handlers)\r\n    return function(_, key, param)\r\n        local handler = handlers[key]\r\n\r\n        if handler then\r\n            handler(param)\r\n        end\r\n    end\r\nend\nend)\npackage.preload['du-crafting-hud:du_lib/state_manager/model/Service.lua']=(function()\n---@class Service : DuLuacElement\r\n---@field hasHud boolean\r\nService = {}\r\nService.__index = Service\r\n\r\n---@return Service\r\nfunction Service.new()\r\n    local self = --[[---@type self]] {}\r\n\r\n    library.addEventHandlers(self)\r\n\r\n    ---@param state State\r\n    function self.start(state)\r\n        error('Service.start() method not implemented.')\r\n    end\r\n\r\n    self.hasHud = false\r\n\r\n    ---@return string\r\n    function self.drawHud()\r\n        error('Service.drawHud() method not implemented.')\r\n\r\n        return ''\r\n    end\r\n\r\n    return setmetatable(self, Service)\r\nend\r\n\nend)\npackage.preload['du-crafting-hud:du_lib/concurrency/CoroutineManager.lua']=(function()\n---@class CoroutinePermit\r\n---@field __index\r\n---@field workCounter number\r\nCoroutinePermit = {}\r\nCoroutinePermit.__index = CoroutinePermit\r\n\r\n---@param max number\r\n---@return CoroutinePermit\r\nfunction CoroutinePermit.new(max)\r\n    local self = --[[---@type self]] {}\r\n\r\n    self.workCounter = 0\r\n\r\n    ---@param permits number\r\n    ---@overload fun() : void\r\n    function self.acquire(permits)\r\n        permits = permits or 1\r\n\r\n        if self.workCounter < max then\r\n            self.workCounter = self.workCounter + 1\r\n        else\r\n            self.yield()\r\n        end\r\n    end\r\n\r\n    function self.yield()\r\n        _, max = coroutine.yield(self.workCounter)\r\n        self.workCounter = 0\r\n    end\r\n\r\n    return setmetatable(self, CoroutinePermit)\r\nend\r\n\r\n---@class CoroutineManager\r\n---@field __index\r\nCoroutineManager = {}\r\nCoroutineManager.__index = CoroutineManager\r\n\r\n---@param workPerTick number coroutine amount of work done per tick\r\n---@return CoroutineManager\r\nfunction CoroutineManager.new(workPerTick)\r\n    local self = --[[---@type self]] {}\r\n\r\n    ---@type thread\r\n    local masterCoroutine\r\n    ---@type table<Service, table<string, thread>>\r\n    local coroutines\r\n    ---@type number\r\n    self.activeCoroutines = 0\r\n\r\n    function self.poll()\r\n        if self.activeCoroutines > 0 and coroutine.status(masterCoroutine) == \"suspended\" then\r\n            local result, msg = coroutine.resume(masterCoroutine)\r\n            if not result then\r\n                error('master coroutine failed: ' .. msg)\r\n            end\r\n        end\r\n    end\r\n\r\n    ---@param service Service\r\n    ---@param name string\r\n    ---@param handler fun(permit: CoroutinePermit): void\r\n    ---@param repeated boolean\r\n    ---@overload fun(service: Service, name: string, handler: (fun(permit: CoroutinePermit): void)): void\r\n    function self.registerCoroutine(service, name, handler, repeated)\r\n        coroutines = coroutines or {}\r\n        self.activeCoroutines = self.activeCoroutines + 1\r\n\r\n        if not masterCoroutine then\r\n            masterCoroutine = coroutine.create(function()\r\n                local tickWorkQuota = workPerTick\r\n                local tickRoutinesCalled = 0\r\n                while self.activeCoroutines > 0 do\r\n                    local cycleActiveCoroutines = 0\r\n                    for _, routines in pairs(coroutines) do\r\n                        for routineName, routine in pairs(routines) do\r\n                            local permit = CoroutinePermit.new(tickWorkQuota)\r\n\r\n                            if coroutine.status(routine) == \"suspended\" then\r\n                                cycleActiveCoroutines = cycleActiveCoroutines + 1\r\n                                tickRoutinesCalled = tickRoutinesCalled + 1\r\n                                local result, returned = coroutine.resume(routine, permit, tickWorkQuota)\r\n                                if result then\r\n                                    tickWorkQuota = tickWorkQuota - returned\r\n                                else\r\n                                    error('coroutine failed \"' .. routineName .. '\": ' .. returned)\r\n                                end\r\n\r\n                                if tickWorkQuota == 0 or tickRoutinesCalled >= self.activeCoroutines then\r\n                                    coroutine.yield()\r\n                                    tickWorkQuota = workPerTick\r\n                                    tickRoutinesCalled = 0\r\n                                end\r\n                            end\r\n                        end\r\n                    end\r\n                    self.activeCoroutines = cycleActiveCoroutines\r\n                end\r\n            end)\r\n        end\r\n\r\n        local routine = coroutine.create(function(permit)\r\n            while repeated do\r\n                handler(permit)\r\n                permit.yield()\r\n            end\r\n            handler(permit)\r\n\r\n            return permit.workCounter\r\n        end)\r\n\r\n        local serviceCoroutines = coroutines[service] or {}\r\n        serviceCoroutines[name] = routine\r\n        coroutines[service] = serviceCoroutines\r\n    end\r\n\r\n    return setmetatable(self, CoroutineManager)\r\nend\nend)\npackage.preload['du-crafting-hud:du_lib/state_manager/model/State.lua']=(function()\n---@class State\r\nState = {}\r\nState.__index = State\r\n\r\n---@param services Service[]\r\n---@param unit ControlUnit\r\n---@param system System\r\n---@param workPerTick number coroutine amount of work done per tick\r\n---@param workTickInterval number coroutine interval between two ticks\r\n---@param onStarts (fun(state: State): void)[]\r\n---@overload fun(services: Service[], unit: ControlUnit, system: System, workPerTick: number, workInterval: number): State\r\n---@return State\r\nfunction State.new(services, unit, system, workPerTick, workTickInterval, onStarts)\r\n    local self = --[[---@type self]] {}\r\n\r\n    onStarts = onStarts or {}\r\n\r\n    ---@type fun[]\r\n    local handlersDeregister = {}\r\n    ---@type string[]\r\n    local timers = {}\r\n\r\n    local function drawHud()\r\n        ---@type string[]\r\n        local hud = {}\r\n        for _, service in ipairs(services) do\r\n            if service.hasHud then\r\n                table.insert(hud, service.drawHud())\r\n            end\r\n        end\r\n\r\n        if #hud > 0 then\r\n            local hudString = table.concat(hud)\r\n\r\n            if hudString ~= '' then\r\n                system.setScreen(hudString)\r\n            end\r\n        end\r\n    end\r\n\r\n    local coroutineManager = CoroutineManager.new(workPerTick)\r\n    function self.start()\r\n        for _, service in ipairs(services) do\r\n            service.start(self)\r\n        end\r\n\r\n        for _, onStart in ipairs(onStarts) do\r\n            onStart(self)\r\n        end\r\n\r\n        if coroutineManager.activeCoroutines > 0 then\r\n            self.registerTimer('State_masterCoroutine', workTickInterval, coroutineManager.poll)\r\n        end\r\n\r\n        system.showScreen(true)\r\n        self.registerHandler(system, SYSTEM_EVENTS.UPDATE, drawHud)\r\n    end\r\n\r\n    function self.stop()\r\n        for _, deregister in ipairs(handlersDeregister) do\r\n            deregister()\r\n        end\r\n        handlersDeregister = {}\r\n\r\n        for _, timer in ipairs(timers) do\r\n            unit.stopTimer(timer)\r\n        end\r\n        timers = {}\r\n\r\n        coroutineManager = CoroutineManager.new(workPerTick)\r\n    end\r\n\r\n    ---@param object DuLuacElement\r\n    ---@param event string\r\n    ---@param handler fun\r\n    function self.registerHandler(object, event, handler)\r\n        local handlerId = object:onEvent(event, handler)\r\n        table.insert(handlersDeregister, function()\r\n            object:clearEvent(event, handlerId)\r\n        end)\r\n    end\r\n\r\n    ---@param service Service\r\n    ---@param name string\r\n    ---@param handler fun(permit: CoroutinePermit): void\r\n    ---@param repeated boolean\r\n    ---@overload fun(service: Service, name: string, handler: (fun(permit: CoroutinePermit): void)): void\r\n    function self.registerCoroutine(service, name, handler, repeated)\r\n       coroutineManager.registerCoroutine(service, name, handler, repeated)\r\n    end\r\n\r\n    ---@param timer string\r\n    ---@param interval number\r\n    ---@param handler fun\r\n    function self.registerTimer(timer, interval, handler)\r\n        self.registerHandler(unit, 'onTimer', DuLuacUtils.createHandler({\r\n            [timer] = handler\r\n        }))\r\n\r\n        unit.setTimer(timer, interval)\r\n        table.insert(timers, timer)\r\n    end\r\n\r\n    return setmetatable(self, State)\r\nend\r\n\nend)\npackage.preload['du-crafting-hud:du_lib/requires/service.lua']=(function()\nrequire('du-crafting-hud:du_lib/utils/du_constants.lua')\r\nrequire('du-crafting-hud:du_lib/utils/duluac.lua')\r\nrequire('du-crafting-hud:du_lib/state_manager/model/Service.lua')\r\nrequire('du-crafting-hud:du_lib/concurrency/CoroutineManager.lua')\r\nrequire('du-crafting-hud:du_lib/state_manager/model/State.lua')\nend)\npackage.preload['du-crafting-hud:du_lib/state_manager/service/StateManager.lua']=(function()\n---@class StateManager\r\nStateManager = {}\r\nStateManager.__index = StateManager\r\n\r\n---@param states State[]\r\n---@param system System\r\n---@return StateManager\r\nfunction StateManager.new(states, system)\r\n    local self = --[[---@type self]] {}\r\n\r\n    local currentStateIndex = 1\r\n    local currentState = states[1]\r\n\r\n    function self.start()\r\n        currentState.start()\r\n\r\n        DuLuacUtils.addListener(system, 'onActionStart', {\r\n            ['option1'] = self.nextState\r\n        })\r\n    end\r\n\r\n    function self.nextState()\r\n        currentState.stop()\r\n\r\n        if currentStateIndex + 1 > #states then\r\n            currentStateIndex = 1\r\n        else\r\n            currentStateIndex = currentStateIndex + 1\r\n        end\r\n\r\n        currentState = states[currentStateIndex]\r\n        currentState.start()\r\n    end\r\n\r\n    return setmetatable(self, StateManager)\r\nend\r\n\nend)\npackage.preload['du-crafting-hud:du_lib/requires/stateManager.lua']=(function()\nrequire('du-crafting-hud:du_lib/requires/service.lua')\r\nrequire('du-crafting-hud:du_lib/state_manager/service/StateManager.lua')\nend)\npackage.preload['du-crafting-hud:du_lib/data/raw/ItemGroupsRaw.lua']=(function()\nreturn --[[---@type table<string, ItemGroup>]] {Consumables={groups={Ammunition={groups={[\"Cannon Ammo\"]={groups={[\"Cannon Ammo XS\"]={groups={[\"Kinetic Ammo\"]={items={3238320397,1980351716,3818049598,2680492642,2746947552}},[\"Thermic Ammo\"]={items={147467923,3607061517,726551231,370579567,2917884317}}}},[\"Cannon S Ammo\"]={groups={[\"Thermic Ammo\"]={items={3253142563,1912399735,2014631386,1081563239,846420746}},[\"Kinetic Ammo\"]={items={52497197,2013297395,1256032552,864736227,2048035010}}}},[\"Medium Cannon Ammo\"]={groups={[\"Kinetic Ammo\"]={items={3802426170,1837088359,1087392944,3901365200,2318901128}},[\"Thermic Ammo\"]={items={2886559338,1627746607,1445049256,3352702648,1958427908}}}},[\"Large Cannon Ammo\"]={groups={[\"Kinetic Ammo\"]={items={2564171448,3111934432,1368644517,2754186867,234876889}},[\"Thermic Ammo\"]={items={2150864517,3705351908,3564640746,99109453,2793941079}}}}}},[\"Railgun Ammo\"]={groups={[\"Railgun Ammo M\"]={groups={[\"Antimatter Ammo\"]={items={3025930763,2753235550,1378313789,2519489329,1129867076}},[\"Electromagnetic Ammo\"]={items={3778585474,1314738719,711588165,2547387530,2401068335}}}},[\"Railgun L Ammo\"]={groups={[\"Antimatter Ammo\"]={items={2009039852,1377917611,994404082,1555786609,4091052814}},[\"Electromagnetic Ammo\"]={items={3711223735,2997406270,985599166,493646316,19332250}}}},[\"Railgun Ammo XS\"]={groups={[\"Antimatter Ammo\"]={items={2975180925,1685710165,3669030673,2562077926,2897347844}},[\"Electromagnetic Ammo\"]={items={1190298485,2661753045,4121476880,671997275,2513950249}}}},[\"Railgun S Ammo\"]={groups={[\"Electromagnetic Ammo\"]={items={2890607046,3511898141,3384068103,1818470694,2277755297}},[\"Antimatter Ammo\"]={items={2423442023,2665059784,2765153031,2454971316,2944291964}}}}}},[\"Laser Ammo\"]={groups={[\"Laser S Ammo\"]={groups={[\"Thermic Ammo\"]={items={3820970963,1363871248,1750052574,1933474332,3423590348}},[\"Electromagnetic Ammo\"]={items={4088065384,2667876309,1921694649,1929049234,3098134459}}}},[\"Laser Ammo XS\"]={groups={[\"Thermic Ammo\"]={items={839159661,2678465305,4135531540,1765328811,570530668}},[\"Electromagnetic Ammo\"]={items={3539993652,3637130597,552630719,902792933,1067471403}}}},[\"Laser Ammo M\"]={groups={[\"Thermic Ammo\"]={items={984810201,1230483435,3708417017,2843836124,212874547}},[\"Electromagnetic Ammo\"]={items={1610308198,483699778,220854647,1693315392,2948970732}}}},[\"Laser Ammo L\"]={groups={[\"Thermic Ammo\"]={items={2619099776,154196902,1068250257,36119774,518572846}},[\"Electromagnetic Ammo\"]={items={1664787227,2281477958,2006239134,2465107224,2170035253}}}}}},[\"Missile Pod Ammo\"]={groups={[\"Missile Ammo XS\"]={groups={[\"Kinetic Ammo\"]={items={2148925933,2392386214,3939368391,2591026571,1503181393}},[\"Antimatter Ammo\"]={items={2340151566,2845912456,2059964042,1154972320,2239958675}}}},[\"Missile S Ammo\"]={groups={[\"Kinetic Ammo\"]={items={2679053199,2116379443,1256805327,578039658,108337911}},[\"Antimatter Ammo\"]={items={1284945646,1333805710,2425505244,116711443,2982583326}}}},[\"Missile M Ammo\"]={groups={[\"Kinetic Ammo\"]={items={1491281175,1209270788,397326901,871384738,3718373809}},[\"Antimatter Ammo\"]={items={326385703,403006216,144252385,3987182986,291497016}}}},[\"Missile Ammo L\"]={groups={[\"Kinetic Ammo\"]={items={1186613579,3073125595,2529340738,897887498,934893004}},[\"Antimatter Ammo\"]={items={3164761417,3376140874,579968086,995805029,3594012056}}}}}}}},Fireworks={groups={[\"Shower shaped Fireworks\"]={},[\"Ring-shaped Fireworks\"]={},[\"Palm tree-shaped Fireworks\"]={},[\"Ball-shaped Fireworks\"]={}}},[\"Warp Cell\"]={items={1339253011}},[\"Relic Plasmas\"]={items={1831558339,1831557945,1831558340,1831558337,1831558338,1831558336,1831558342,1831558343,1831558341,1769135512}},Scraps={groups={DeprecatedScrap={},[\"Basic Scraps\"]={items={2558961706,2417840347,4063983201,3857279161}},[\"Exotic Scraps\"]={items={1182663952,2165650011,3307634000,877202037}},[\"Uncommon Scraps\"]={items={409040753,1831205658,1251531294,3630798120}},[\"Rare Scraps\"]={items={3150580281,1370993297,270611770,1032380176}},[\"Advanced Scraps\"]={items={2115439708,1423148560,409671366,3814734889}}}}}},Elements={groups={[\"Construct Elements\"]={groups={Other={groups={[\"Gravity changers\"]={},[\"Conveyor belts\"]={},Factories={},[\"Market Pods\"]={},[\"Electricity providers\"]={},Markets={},Speakers={},Radars={},[\"Decorative Territory Unit\"]={}}},[\"Combat & Defense Elements\"]={groups={[\"Weapon Unit\"]={groups={Cannons={groups={[\"Cannons L\"]={items={418164307,845167470,3152865678,3289044684,845167469,3960316608,3960316615,418164306,3152865672,418164308,3960316609,845167468,3152865673}},[\"Cannons S\"]={items={1073121333,2058706004,1073121335,1901919706,3567179842,429894438,2058706007,3567179845,3567179843,2058706005,1073121334,429894436,429894437}},[\"Cannons XS\"]={items={3455226644,3467785559,3384934783,3455226647,3384934780,3384934781,3467785553,684853151,684853120,3741742452,3467785552,684853150,3455226645}},[\"Cannons M\"]={items={2672575278,2188788021,2457342402,2457342403,2457342404,2188788022,2188788020,2383624966,2383624965,2672575279,2672575276,1699425404,2383624964}}}},[\"Missile Pods\"]={groups={[\"Missiles M\"]={items={1217643701,1557865377,598736203,1068910656,1217644363,1217643700,1102564707,1102564708,1068910670,598736197,598736196,1068910671,1102564706}},[\"Missiles L\"]={items={3650288368,3650288374,708864066,1205879483,1205879482,708864069,3453451050,3453451051,3453451048,3650288369,1205879485,3873532190,708864067}},[\"Missiles S\"]={items={136359050,1109891544,136359051,2668363433,1843877005,136359048,1843877006,2668363432,1100091708,1100091709,2668363439,1843877007,1100091711}},[\"Missiles XS\"]={items={2239993844,3611570508,1780076561,2239993845,1260582276,1780076560,3611570509,134390789,134390788,134390791,1780076562,2239993846,3611570511}}}},Railguns={groups={[\"Railguns S\"]={items={2991505111,831043071,1767704161,2991505105,831043070,831043069,2991505104,223437807,223437800,1767704174,853107412,1767704175,223437801}},[\"Railguns L \"]={items={2916726762,30018129,2916726760,30018135,3670363953,3670363955,4062760163,4062760160,430145504,3670363952,4062760162,2916726763,30018128}},[\"Railguns XS\"]={items={690643397,549955075,2108818540,1816732409,690643419,1816732415,1816732408,2108818543,549955101,549955100,31327772,690643396,2108818541}},[\"Railguns M\"]={items={111253024,3396072211,1641776328,3396072236,111253039,111253038,1641776330,3396072237,3057550301,3057550300,2733257194,1641776331,3057550275}}}},Gun={},Lasers={groups={[\"Lasers M\"]={items={360504284,3840109426,3840109425,3840109424,3588765877,3588765876,3805044394,3805044393,360504286,360504287,1117413121,3588766026,3805044395}},[\"Lasers XS\"]={items={3698237862,796456749,3698237865,1604660448,11309408,1604660449,3698237863,796456747,796456746,3972697534,3972697533,1604660455,3972697532}},[\"Lasers S\"]={items={338218847,3730148334,338218840,32593579,3730148320,3730148335,338218841,1737118475,1737118473,4124398199,4124398192,4124398193,1737118474}},[\"Lasers L\"]={items={3991674464,679378437,3516228574,679378436,2356629410,679378438,2356629409,2356629408,4270062441,3991674479,3991674478,4270062440,4270062446}}}}}},[\"Shield Generators\"]={groups={[\"Base Shield Generator\"]={items={1430252067}},[\"Capacitor Shield Generators\"]={items={2533776367,2098965040,2846330267,2602781071,2037602890,3840257886,1478631104,311842630}},[\"Variable Shield Generators\"]={items={2209766327,1486568571,3343633564,3864567612,3052136397,4081549548,1401343832,2343432065}},[\"Venter Shield Generators\"]={items={1514631881,1747277189,1735485600,4128180027,4078736566,2842824007,484538921,982995683}},[\"Advanced Shield Generators\"]={items={2034818941,2882830295,254923774,3696387320}}}},Radar={groups={[\"Atmospheric Radar\"]={items={4213791403,3094514782,612626034}},[\"Space Radars\"]={groups={[\"Space Radars S\"]={items={838245688,809783310,809783311,838245690,4118496992,2375197137,2375197136,2375197139,809783408,838245691}},[\"Space Radars M\"]={items={2608116213,3060580944,1707018148,3831485995,2608116214,2608116212,3060580945,3060580950,1707018154,1707018149}},[\"Space Radars L\"]={items={3612800224,2075264591,2075264944,3250064334,3612800254,3612800255,3250064333,2075264590,2802863920,3250064332}}}}}}},items={774130122}},[\"Transportation Elements\"]={groups={Engines={groups={[\"Atmospheric Brakes\"]={groups={[\"Space Brakes\"]={items={3243532126,1452351552,3039211660}},Airbrakes={items={104971834,2198271703,65048663}}}},Engines={groups={[\"Rocket Engines\"]={items={3623903713,359938916,2112772336}},[\"Space Engines\"]={groups={[\"Small Space Engines\"]={items={270403386,2510194717,2682344779,1624640879,2090364569,270403387,2682344778,2510194716,529520576,1171610140,1326357437,1624640872,3764949976}},[\"Medium Space Engines\"]={items={99470466,1757019468,3024541675,2489350112,37629189,85796763,1326315525,1326315524,37629188,3897078752,1757019469,516669711,516669710}},[\"Large Space Engines\"]={items={2809629801,273900142,2809629798,2495558023,892904533,2637003463,613453124}},[\"Space Engines XS\"]={items={2243775376,2368501172,3719125853,175947629,3083225012,1754053133,1754053134,2368501171,175947630,16482091,1971700279,1213509759,3719125852}},[\"Space Engines XL\"]={items={1773467598,3846850308,130796680,1773467599,934426297,2200254788,3478227881,934426296,701947611,1237158531,2497069959,2497069958,3478227882}}},items={2379018394,3432389655,2379018393,516669708,2497069976,3719125843,270403388,3432389652,4025377658,4025377657,2809629799}},[\"Atmospheric Engines\"]={groups={[\"Small Atmospheric Engines\"]={items={2043566501,1301142497,3689697821,385121459,1503780712,385121456,1679964557,317861818,1152783535,3689697794,1152783520,2203746213,1301142496,1152783534}},[\"Atmospheric Engines XS\"]={items={3174850377,3612851272,887167900,710193240,4201522392,676012472,3612851279,4201522399,2472120803,2711764151,1933133404,2711763785,2711764150,2472120802}},[\"Large Atmospheric Engines\"]={items={1638517115,3475626911,2375915630,2510112556,1397818123,3211645332,3211645339,2559369183,1638517112,1397818124,1053170502,1638517113,2559369176,2714399324}},[\"Medium Atmospheric Engines\"]={items={488092471,488092468,488092470,260237137,2370891600,230429858,4072611011,3847351355,2370891601,3295665550,3377917824,3377917825,790956382,790956353}}}},Adjustors={items={47474508,2818864930,3790013467,2648523849}},[\"Ground Engines\"]={groups={[\"Hovercraft Engines\"]={items={650556760,2776777596,2333052331,1105322870,3919255966,2494203891,1468805961,2991279664}},[\"Vertical Boosters\"]={items={3775402879,2216363013,913372512,3556600005}}}}}},Airfoil={groups={Aileron={items={1923840124,2334843027,4017253256,1856288931,2737703104,2292270972}},Wing={items={2532454166,4179758576,404188468,1727614690}},Stabilizer={items={1455311973,3474622996,1090402453,1234961120}}}}}},[\"High-Tech Transportation\"]={groups={[\"Anti-Gravity Pulsor\"]={items={966816758}},[\"Anti-Gravity Generator\"]={items={233079829,3997343699,294414265}},[\"Warp Drive Units\"]={items={2643443936}},[\"Warp Beacon Units\"]={items={2468029849}}}},[\"Support Tech\"]={groups={[\"Landing Gears\"]={items={4078067869,1899560165,2667697870,1884031929}},Gyroscopes={items={2585415184}}}}}},[\"Industry & infrastructure Elements\"]={groups={Industry={groups={[\"Exotic Industry\"]={items={4024529716}},[\"Rare Industry\"]={items={2808015396,648743081,1762226674,3026799989,1762227889,2200747730,2793358076,584577123,2861848556,1762226233,1132446358,2480866766,3264314284,2480928544}},[\"Deprecated industry\"]={},[\"Mining Units\"]={items={3519691962,1949562989,3204140760,3204140766,3204140761,3204140764,3204140767}},[\"Uncommon Industry\"]={items={2793358078,2480866760,2200747728,648743083,2480928550,3264314258,2808015394,3026799987,2861848558,1762227855,584577125,1762226235,1762226636,1132446360}},[\"Advanced Industry\"]={items={648743080,2480866767,2808015397,3026799988,1762226675,1762226232,2200747731,2861848557,2480928551,2793358079,584577124,1762227888,3264314259,1132446361}},[\"Basic Industry\"]={items={2022563937,3857150880,983225811,1215026169,1762226876,3914155468,1762226819,2556123438,3701755071,983225808,2702446443,2681009434,409410678,983225818}}},items={4139262245,63667997}},Containers={groups={Dispensers={items={16651125,333062081}},[\"Ammo Container\"]={items={2300179701,923167511,50309297,300986010}},[\"Fuel Tanks\"]={groups={[\"Rocket Fuel Containers\"]={items={2477859329,3126840739,4180073139,1663412227}},[\"Space Fuel Containers\"]={items={773467906,2212207656,1790622152}},[\"Atmospheric Fuel Containers\"]={items={3039582547,3273319200,3464628964,2183619036}}}},[\"Item containers\"]={items={3514648916,2504111555,1832899704,1604594468,373451737,311555255,3514648919,2697077621,1604594467,1978507645,678611231,343666429,343666431,311555254,4257269380,1123475697,2431483718,2504111554,2125213321,2004990657,1604594466,2557270549,3983850218,3943113244,1832899705,521274609,1123475696,4257269383,200670527,3514648917,2504111556,3801121529,3705714977,343666430,4257269381,1594689569,3983850220,2557270546,3943113247,3943113245,987846328,2557270547,2747418228,1689381593,2697077515,1123475702,1154650699,3983850219,2533784020,1832899707,2697077620,311555253,572613525,373359444,2000409238}},[\"Mission Container\"]={items={1920590006,4029924807,386276308,4029924861,386276317,4029924862}}}}}},Systems={groups={[\"Territory Scanners\"]={items={3858829819}},[\"Control Units\"]={groups={[\"Generic Control Units\"]={items={3415128439}},[\"Gunner Module\"]={items={3327293642,1373443625,564736657}},[\"Emergency controllers\"]={items={286542481}},[\"Piloting Control Units\"]={groups={[\"Hovercraft cockpits\"]={items={1744160618}},[\"Remote Controllers\"]={items={1866437084}},[\"Command seat\"]={items={3655856020}},[\"Closed cockpits\"]={items={3640291983}}}}}},[\"Surrogate Station Equipment\"]={items={2093838343,3667785070}},[\"Resurrection Nodes\"]={items={1109114394}},[\"Teleportation Nodes\"]={}},items={2413564665}},[\"Furniture & Appliances\"]={groups={Lights={items={823697268,3524314552,677591159,3923388834,1603266808,2027152926,3981684520,632353355,25682791,3231255047,177821174,3180371725,787207321}},[\"Fireworks Launchers\"]={items={3882559017}},Displays={groups={Screens={groups={[\"Video screen\"]={},Signs={groups={[\"Admin signs\"]={}},items={3919696834,166656023,2610895147,3068429457,166549741,362159734,1533790308}}},items={184261427,879675317,3988663014,3988665660,3988662884,3988662951,184261558,184261490}},[\"Info Buttons\"]={items={3996923355}}}},Repulsors={},[\"High-Tech Furniture\"]={groups={[\"Virtual projectors\"]={items={3929462194}},[\"Force Fields\"]={items={3686074288,3685982092,3686006062,3685998465}}}},Doors={items={201196316,764397251,1139773633,1097676949,581667413,297147615,1256519882,2858887382,4249659729,3709017308,1289884535,741980535}},Chairs={items={3929116491,2169816178,3517217013,4186859262,4216497731,2453312794,3736537839,2846288811,1235633417,542122758,1261703398,2018455538,554266799}},[\"Decorative Element\"]={groups={Antennas={items={413322747,206489025,1951235468}},Adjuncts={items={3695530525,3292462663,2429336341,1894947006}},Board={items={542805258}},[\"Arkship Elements\"]={},[\"Deprecated decorative gun\"]={},Holograms={items={124823209,2137895179,85154060,1541106442,4090740447}},Windows={items={1900076171,2236273961,2158665549,3924941627,1326565833,4226053198,4167375414,3268459843,1952409967,242448402,515378511,3014939922,1804139232,894516284,3521312761,1484667376,2086563919,2266946860,561162197,1165506034,2792485016,2433054263,1001848134,695039310}},Barriers={items={3261824887,3261824822,1377211067}},Furniture={items={283549593,3893102542,4083139484,2428627426,1268259677,3813093434,3824401006,1082668972,1407324391,3845900543,1395483977,3813093435,3193900800,4083139459,4083139485,3193900802,3193900801,2216112746}},[\"Hull decoration\"]={items={3337817675,3337817677,3337817674,4145570204,1220701936}},[\"Bathroom Elements\"]={items={400937499}},[\"Decorative cables\"]={items={1542146746,1700326385,1542390549,1542390551,1700326384,1542146744,1700326390,1542146745,1542390550}},Plants={items={630574505,3106061130,3106061133,195870297,630574506,3106061140,3106061128,3106061129,195870296,195870294,195870295,630574502,630574503,1797415729,630574504,3106061141,3106061143,3106061142,195870299,2648123924,3106061131}},Pipes={items={2709793409,543225023,2937058341,2824951359,2123842216,2917319456}}}},[\"Electronic Elements\"]={groups={Electronics={groups={Relays={items={1694177571}},[\"Data Emitters\"]={items={1279651501,3287187256,2809213930}},[\"Logic Operators\"]={groups={[\"NAND Operators\"]={items={3600874516}},[\"XOR Operators\"]={items={3437395596}},[\"NOT operators\"]={items={2629309308}},[\"OR operators\"]={items={1707712023}},[\"NOR operators\"]={items={1839029088}},[\"AND operators\"]={items={2569152632}}}},Randomizers={},Databanks={items={812400865}},[\"Delay Lines\"]={items={1474604499}},Receivers={items={736740615,3732634076,2082095499}},[\"Laser Emitters\"]={items={609676854,1784722190}},Counters={items={888062910,888062908,888062905,888063487,888062906}},Toggles={}}},Sensors={groups={Telemeters={items={1722901246}},[\"Laser Detectors\"]={items={783555860,2153998731}},[\"Zone detectors\"]={items={485149481,485149228,485151209,4241228057}},[\"Light Detectors\"]={}}},Triggers={groups={[\"Manual Buttons\"]={items={2896791363,1550904282}},[\"Pressure tiles\"]={items={2012928469}},[\"Manual Switches\"]={items={4181147843}}}}}},Elevators={items={3663249627}}}}}},[\"Planet Elements\"]={groups={[\"Ground lights\"]={},[\"Territory Units\"]={items={1358842892,0}},[\"Core Units\"]={groups={[\"Static Core Units\"]={items={2738359963,2738359893,910155097,909184430}},[\"Dynamic Core Units\"]={items={1418170469,183890713,183890525,1417952990}},[\"Space Core Units\"]={items={5904195,5904544,3624942103,3624940909}}}}}}}},Materials={groups={[\"Refined Materials\"]={groups={Pure={groups={[\"Rare Pure Material\"]={items={3211418846,3837955371,2031444137,3323724376}},[\"Advanced Pure Material\"]={items={3822811562,3810111622,3012303017,1807690770}},[\"Deprecated Pure Materials\"]={},[\"Basic Pure Material\"]={items={2240749601,198782496,2589986891,159858782}},[\"Exotic Pure Material\"]={items={2007627267,752542080,1126600143,2421303625}},[\"Uncommon Pure Material\"]={items={2147954574,1466453887,3603734543,2112763718}}},items={947806142,1010524904}},Catalyst={items={3729464850,3729464848,3729464849}},Product={groups={Polymers={items={918590356,2097691217,2014531313,255776324,4103265826}},[\"Conductor Metals\"]={items={1673011820,18262914,2550840787,1734893264,1034957327}},[\"Heavy Metals\"]={items={511774178,2984358477,3987872305,167908167,3518490274}},[\"Light Metals\"]={items={231758472,2565702107,3292291904,2021406770,2929462635}},[\"Glass materials\"]={items={606249095,2301749833,4150961531,1942154251,3308209457}}},items={331532952,770773323,645870905,2646210914,2679709617,1622880428}}}},Fuels={groups={[\"Rocket Fuels\"]={items={106455050}},[\"Space Fuels\"]={items={840202981,840202986,840202980,840202987}},[\"Atmospheric Fuels\"]={items={2579672037}}}},[\"Honeycomb materials\"]={groups={[\"Pure Honeycomb Materials\"]={groups={[\"Silver Honeycomb\"]={items={3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609}},[\"Manganese Honeycomb\"]={items={3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802}},[\"Cobalt Honeycomb\"]={items={3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120}},[\"Chromium Honeycomb\"]={items={1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224}},[\"Titanium Honeycomb\"]={items={402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494}},[\"Calcium Honeycomb\"]={items={3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708}},[\"Vanadium Honeycomb\"]={items={1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774}},[\"Copper Honeycomb\"]={items={1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603}},[\"Silicon Honeycomb\"]={items={4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329}},[\"Nickel Honeycomb\"]={items={1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464}},[\"Gold Honeycomb\"]={items={2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312}},[\"Sulfur Honeycomb\"]={items={1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395}},[\"Scandium Honeycomb\"]={items={2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742}},[\"Aluminium Honeycomb\"]={items={123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466}},[\"Sodium Honeycomb\"]={items={2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922}},[\"Niobium Honeycomb\"]={items={30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913}},[\"Fluorine Honeycomb\"]={items={1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000}},[\"Carbon Honeycomb\"]={items={1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897}},[\"Lithium Honeycomb\"]={items={1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115}},[\"Iron Honeycomb\"]={items={2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075}}}},[\"Product Honeycomb Materials\"]={groups={Wood={items={2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600}},[\"Brick Honeycomb\"]={items={2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432}},Marble={items={}},[\"Grade 5 Titanium Alloy\"]={items={483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306}},[\"Al-Li Honeycomb\"]={items={2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118}},[\"Concrete Honeycomb\"]={items={38264863,38264863,38264863,38264863,38264863,38264863,38264863,38264863,38264863,38264863,38264863,38264863,38264863,38264863,38264863}},[\"Maraging Steel\"]={items={734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314}},Plastic={items={}},Silumin={items={3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135}},Mangalloy={items={3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284}},[\"Stainless Steel\"]={items={3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100}},Inconel={items={1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708}},[\"Duralumin Honeycomb\"]={items={1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154}},Steel={items={}},[\"Sc-Al\"]={items={1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623}},[\"Luminescent Glass Honeycomb\"]={items={1268122879}},[\"Carbon Fiber Honeycomb\"]={items={2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640}}}}}},[\"Minable materials\"]={groups={Ore={groups={[\"Tier 4 Ores\"]={items={1866812055,3546085401,1467310917,271971371}},[\"Tier 5 Ores\"]={items={789110817,3934774987,0,629636034,2162350405}},[\"Tier 3 Ores\"]={items={1065079614,3837858336,4041459743,1050500112}},[\"Tier 1 Ores\"]={items={262147665,4234772167,3724036288,299255727}},[\"Tier 2 Ores\"]={items={2289641763,343766315,3086347393,2029139010}}}}}}}},Parts={groups={[\"Exceptional parts\"]={groups={[\"Quantum Barriers\"]={items={984088007,984088006,984088025}},[\"Antimatter cores\"]={items={375744325}},[\"Anti-gravity cores\"]={items={2999509692,2999509666,2999509693}},[\"Quantum Alignment Units\"]={items={2601646636,2601646634}}},items={2601646635}},[\"Complex parts\"]={groups={[\"Quantum Cores\"]={items={850241762,850241766,850241763,850241764,850241765}},[\"Solid Warheads\"]={items={2599686739,2599686738}},[\"Antimatter capsules\"]={items={3661595538,3661595539,3661595540}},Hydraulics={items={1331181089,1331181088,1331181091,1331181119,1331181118}},Magnets={items={1246524878,1246524879,1246524866,1246524876,1246524877}},[\"Singularity Containers\"]={items={3640212318,3640212315,3640212312,3640212314,3640212313}},Optics={items={3739200055,3739200049,3739200048,3739200050,3739200051}},Electronics={items={1297540454,1297540453,1297540452,1297540450,1297540451}},[\"Explosive Modules\"]={items={2541811485,2541811486,2541811484}},[\"Power Systems\"]={items={527681750,527681755,527681753,527681752,527681751}},Burners={items={2660328728,2660328735,2660328729,2660328734,2660328732}},Processors={items={3808417022,3808417020,3808417021}},Injectors={items={1971447078,1971447073,1971447072,1971447079}}},items={1971447076}},[\"Intermediary parts\"]={groups={Screws={items={3936127017,3936127018,3936127019}},LEDs={items={1234754161,1234754162,1234754160}},Fixations={items={466630564,466630567,466630565}},Connectors={items={2872711778,2872711781,2872711779}},Components={items={794666748,794666749,794666751}},Pipes={items={1799107246,1799107244,1799107247}}}},[\"Deprecated parts\"]={},[\"Functional parts\"]={groups={[\"Gas cylinders\"]={items={792299450,2119086168,2119086146}},[\"Firing systems\"]={items={3242492811,3242492880,3242492810,3740021214,3242491977,3740092443,3740074253,3242492875,3242492874,3242491976,3242492817,3242491986,3740078396}},[\"Control systems\"]={items={3431996502,3431996632,3431996504,3431996625,3431996639,972195890}},[\"Ore Scanners\"]={},Motherboards={items={242607950}},[\"Combustion Chambers\"]={items={4016318475,2662310021,2662310020,2662317126,2662310081,2662310018,4017996241,2662310087,2662309888,4016322616,2662310086,2662309894,2662317132,2662309895,4016359657,2662317125}},[\"Optical sensors\"]={},[\"Power Transformer\"]={items={4186206035,4186205972,4186206037,3291043715,4186198417,4186198483,4186198480}},[\"Laser Chambers\"]={items={1252823771,2825505990,1252764131,2825506200,2825503297,1252768242,2825503320,1252823760,2825506265,2825506266,2825506203,2825503323,2825506243,1252768249,1252819658,2825506178,1252764136,1252819649,1252839764}},[\"Core Systems\"]={items={1775106424,1775106685,1775106620,1775106492,1775106618,1775106597,1172598456,1775106556}},[\"Mechanical Sensors\"]={items={204462057,204444775,204469317}},[\"Chemical containers\"]={items={625289663,625289726,625115179,3717621915,625115345,625289720,625115176,625289727,3714764686,3717621906,625115241,625115242}},[\"Magnetic Rails\"]={items={2722609530,2722609330,2722609340,4210044590,4210065279,2722610741,2722609523,2722609339,2722610747,4211034905,2722609533,2722610746}},Screens={items={184261422,184261412,1428596467,184261478,1428608303,1428608292,1428596474}},Antennas={items={1080827739,1080827609,1080827615,2302040376,1080827716,1080827527,2301991355,1080827674,1080827653,1080827590,2302027954,1080827544,1080826905,2301991330,1080827550,1080827676,1080827741}},Lights={items={1829611507,3345566836}},[\"Mobile Panels\"]={items={407969641,494821798,407844040,494821860,494825061,407844051,407690298,494823730,407690291,494823725,494821797,494825062,494821804,494821863,408022872,407969632,494825071,494821869,494823731,408022865}},[\"Missile Silos\"]={items={3857142758,3857142317,3857142311,3857142764,3857142113,3026262169,3026356360,3857142123,3857142757,3857142308,3857142112,3026385661}},[\"Robotic Arms\"]={items={997370746,2999955044,997368796,997368670,997368799,997368607}},[\"Electric engines\"]={items={3172866509,3728054834,3728054836}},[\"Ionic chambers\"]={items={1390563239,962704747,1390563172,962712579,1390562878,962712586,962700657,962704738,962700664,1390562879,1390563256,1390563262,963003738,1390562873,1390563302,1390563327,1390563321,1390563197,963003731,1390563195}}},items={962696457,788805607,3501535583,3501536145,4016282202,3501535518,1390563132,3501535314,3501536208,962696448,3501535556,1390563130,1390563109}},[\"Structural Parts\"]={groups={[\"Reinforced Frames\"]={items={994058205,994057994,1179610516,994058140,994058003,994058004,994058069,994058059,1179605664,994058204,1179601462,1179610525,994057936,1179605671,1179601457,994058066,1179614604,1179614597,994058119,1179593235,1179593236,994057929,994058182,994058141,994057943}},Casings={items={946516044,946524256,946544989,946544964,567007775,946503935,567007899,946516085,567008209,567008215,567007760,567007766,567008148}},[\"Standard Frames\"]={items={873622227,1981363757,873663991,1981362606,1981362536,1981362607,1981362473,1981362581,1981363926,1981363756,1981362671,1981362670,873622058,1981363796,873676070,1981362450,1981362539,1981362643,1981362474,873614065}}}}}}}\nend)\npackage.preload['du-crafting-hud:du_lib/data/ItemGroups.lua']=(function()\n---@type table<string, ItemGroup>\r\nITEM_GROUPS = require('du-crafting-hud:du_lib/data/raw/ItemGroupsRaw.lua')\r\n\r\nI_GROUP_FUEL = 'Fuels'\r\nI_GROUP_ATMO_FUEL = 'Atmospheric Fuels'\r\nI_GROUP_SPACE_FUEL = 'Space Fuels'\r\nI_GROUP_ROCKET_FUEL = 'Rocket Fuels'\r\n\r\nI_GROUP_INT_PART = 'Intermediary Parts'\r\nI_GROUP_FUNC_PART = 'Functional Parts'\r\nI_GROUP_STRUCT_PART = 'Structural Parts'\r\nI_GROUP_COMPLEX_PART = 'Complex Parts'\r\nI_GROUP_EXCEPT_PART = 'Exceptional Parts'\r\n\r\n---@type string\r\nI_GROUP_ORE = 'Ore'\r\nI_GROUP_PURE = 'Pure'\r\nI_GROUP_PRODUCT = 'Product'\r\n\r\nI_GROUP_CONSUMABLES = 'Consumables'\r\nI_GROUP_AMMO = 'Ammunition'\r\nI_GROUP_SCRAP = 'Scraps'\r\nI_GROUP_WARP_CELL = 'Warp Cell'\r\n\r\n---@class ItemGroup\r\n---@field groups table<string, ItemGroup>\r\n---@field items number[]\r\nItemGroup = {}\r\n\r\n---@param group string\r\n---@param scope table<string, ItemGroup>\r\n---@return ItemGroup\r\nlocal function findItemGroup(group, scope)\r\n    for name, groupDef in pairs(scope) do\r\n        if name:lower() == group:lower() then\r\n            return groupDef\r\n        end\r\n\r\n        if groupDef.groups then\r\n            local child = findItemGroup(group, groupDef.groups)\r\n            if child then\r\n                return child\r\n            end\r\n        end\r\n    end\r\n\r\n    return nil\r\nend\r\n\r\n---@type table<string, ItemGroup>\r\nlocal foundItemGroups = {}\r\n---@param group string\r\n---@return ItemGroup\r\nfunction ItemGroup.findItemGroup(group)\r\n    local foundItemGroup = foundItemGroups[group]\r\n    if foundItemGroup then\r\n        return foundItemGroup\r\n    end\r\n\r\n    local itemGroup = findItemGroup(group, ITEM_GROUPS)\r\n    if not itemGroup then\r\n        error(\"Could not find item group: \" .. group)\r\n    end\r\n\r\n    foundItemGroups[group] = itemGroup\r\n\r\n    return itemGroup\r\nend\r\n\r\n---@type table<ItemGroup, number[]>\r\nlocal cachedItemsInGroups = {}\r\n---@param itemGroup ItemGroup\r\n---@return number[]\r\nlocal function getAllItemsInGroup(itemGroup)\r\n    ---@type number[]\r\n    local items = { }\r\n\r\n    local cached = cachedItemsInGroups[itemGroup]\r\n    if cached then\r\n        return cached\r\n    end\r\n\r\n    if itemGroup.groups then\r\n        for _, group in pairs(itemGroup.groups) do\r\n            local groupItems = getAllItemsInGroup(group)\r\n            table.move(groupItems, 1, #groupItems, #items + 1, items)\r\n        end\r\n    end\r\n\r\n    if itemGroup.items then\r\n        for _, item in ipairs(itemGroup.items) do\r\n            table.insert(items, item)\r\n        end\r\n    end\r\n    cachedItemsInGroups[itemGroup] = items\r\n\r\n    return items\r\nend\r\n\r\n---@param itemGroup ItemGroup\r\n---@return number[]\r\nfunction ItemGroup.getItemsInGroup(system, itemGroup, tier, size)\r\n    local allItems = getAllItemsInGroup(itemGroup)\r\n    if not (tier or size) then\r\n        return allItems\r\n    end\r\n\r\n    local items = {}\r\n    for _, item in ipairs(allItems) do\r\n        local itemId = --[[---@type number]] item\r\n        local itemDef = system.getItem(itemId)\r\n        if (not tier or tier == itemDef.tier) and (not size or size:lower() == itemDef.size:lower()) then\r\n            table.insert(items, itemId)\r\n        end\r\n    end\r\n\r\n    return items\r\nend\nend)\npackage.preload['du-crafting-hud:du_lib/data/raw/TalentTemplatesRaw.lua']=(function()\n---@class TalentTemplate\r\n---@field name string\r\n---@field group string\r\n---@field type string\r\n---@field amount number\r\n---@field byTier number[]\r\n---@field bySize string[]\r\n---@field TYPE_OUT string\r\n---@field TYPE_IN string\r\n---@field TYPE_TIME string\r\nTalentTemplate = {}\r\nTalentTemplate.__index = TalentTemplate\r\n\r\nTalentTemplate.TYPE_OUT = 'output'\r\nTalentTemplate.TYPE_IN = 'input'\r\nTalentTemplate.TYPE_TIME = 'time'\r\n\r\n---@param isFixedAmount boolean\r\n---@return TalentTemplate\r\nlocal function talentTemplate(name, group, type, amount, byTier, bySize, byProduct, isFixedAmount)\r\n    local self = --[[---@type TalentTemplate]] {}\r\n\r\n    self.name = name\r\n    self.group = group\r\n    self.type = type\r\n    self.amount = amount\r\n    self.byTier = byTier\r\n    self.bySize = bySize\r\n    self.byProduct = byProduct or false\r\n    self.isFixedAmount = isFixedAmount or false\r\n\r\n    return setmetatable(self, TalentTemplate)\r\nend\r\n\r\n---@overload fun(name, group, type, amount) : TalentTemplate\r\n---@return TalentTemplate\r\nlocal function talentTemplateSingle(name, group, type, amount, isFixedAmount)\r\n    return talentTemplate(name, group, type, amount, nil, nil, false, isFixedAmount)\r\nend\r\n\r\n---@overload fun(name, group, tiers, type, amount) : TalentTemplate\r\n---@return TalentTemplate\r\nlocal function talentTemplateByTier(name, group, type, tiers, amount, isFixedAmount)\r\n    return talentTemplate(name, group, type, amount, tiers, nil, false, isFixedAmount)\r\nend\r\n\r\n---@overload fun(name, group, type, amount) : TalentTemplate\r\n---@return TalentTemplate\r\nlocal function talentTemplateByProduct(name, group, type, amount, isFixedAmount)\r\n    return talentTemplate(name, group, type, amount, nil, nil, true, isFixedAmount)\r\nend\r\n\r\n---@overload fun(name, group, type, tiers, sizes, amount) : TalentTemplate\r\n---@return TalentTemplate\r\nlocal function talentTemplateByTierAndSize(name, group, type, tiers, sizes, amount, isFixedAmount)\r\n    return talentTemplate(name, group, type, amount, tiers, sizes, false, isFixedAmount)\r\nend\r\n\r\nT_GROUP_FUEL_PROD = 'Fuel Productivity'\r\nT_NAME_ATMO_FUEL_PROD = 'Atmospheric Fuel Productivity'\r\nT_NAME_SPACE_FUEL_PROD = 'Space Fuel Productivity'\r\nT_NAME_ROCKET_FUEL_PROD = 'Rocket Fuel Productivity'\r\n\r\nT_GROUP_FUEL_REF = 'Fuel Refining'\r\nT_NAME_FUEL_EFF = 'Fuel Efficiency'\r\nT_NAME_FUEL_REF = 'Fuel Refinery'\r\nT_NAME_ATMO_FUEL_REF = 'Atmospheric Fuel Refinery'\r\nT_NAME_SPACE_FUEL_REF = 'Space Fuel Refinery'\r\nT_NAME_ROCKET_FUEL_REF = 'Rocket Fuel Refinery'\r\n\r\nT_GROUP_INT_PART_PROD = 'Intermediary Part Productivity'\r\nT_NAME_INT_PART_PROD = 'Intermediary Part Productivity'\r\n\r\nT_GROUP_AMMO_PROD = 'Ammo Productivity'\r\nT_NAME_AMMO_EFF = 'Ammo Efficiency'\r\nT_NAME_AMMO_PROD = 'Ammo Productivity'\r\n\r\nT_GROUP_COMP_PART_MAN = 'Complex Parts Manufacturer'\r\nT_NAME_COMP_PART_MAN = 'Complex Parts Manufacturer'\r\n\r\nT_GROUP_EX_PART_MAN = 'Exceptional Parts Manufacturer'\r\nT_NAME_EX_PART_MAN = 'Exceptional Parts Manufacturer'\r\n\r\nT_GROUP_FUNC_PART_MAN = 'Functional Parts Manufacturer'\r\nT_NAME_FUNC_PART_MAN = 'Functional Parts Manufacturer'\r\n\r\nT_GROUP_STRUCT_PART_MAN = 'Structural Parts Manufacturer'\r\nT_NAME_STRUCT_PART_MAN = 'Structural Parts Manufacturer'\r\n\r\nT_GROUP_INT_PART_MAN = 'Intermediary Parts Manufacturer'\r\nT_NAME_INT_PART_MAN = 'Intermediary Parts Manufacturer'\r\n\r\nT_GROUP_ORE_REF = 'Ore Refining'\r\nT_NAME_PURE_REF_EFF = 'Pure Refinery Efficiency'\r\nT_NAME_ORE_REF = 'Ore Refining'\r\n\r\nT_GROUP_PURE_PROD = 'Pure Productivity'\r\nT_NAME_PURE_PROD = 'Pure Productivity'\r\n\r\nT_GROUP_PROD_REF = 'Product Refining'\r\nT_NAME_PROD_REF_EFF = 'Product Refinery Efficiency'\r\nT_NAME_PROD_REF = 'Product Refining'\r\n\r\nT_GROUP_PROD_PROD = 'Product Productivity'\r\nT_NAME_PROD_PROD = 'Product Productivity'\r\n\r\nT_GROUP_SCRAP_REF = 'Scrap Refining'\r\nT_NAME_SCRAP_EFF = 'Scrap Efficiency'\r\nT_NAME_TIER_SCRAP_REF = 'Tier Scrap Refinery'\r\nT_NAME_SCRAP_REF = 'Scrap Refinery'\r\n\r\nT_GROUP_SCRAP_PROD = 'Scrap Productivity'\r\nT_NAME_SCRAP_PROD = 'Scrap Productivity'\r\n\r\nreturn --[[---@type table<string, TalentTemplate[]> ]] {\r\n    --Crafting Talents\r\n    [T_GROUP_FUEL_PROD] = {\r\n        talentTemplateSingle(T_NAME_ATMO_FUEL_PROD, I_GROUP_ATMO_FUEL, TalentTemplate.TYPE_OUT, 0.05),\r\n        talentTemplateSingle(T_NAME_SPACE_FUEL_PROD, I_GROUP_SPACE_FUEL, TalentTemplate.TYPE_OUT, 0.05),\r\n        talentTemplateSingle(T_NAME_ROCKET_FUEL_PROD, I_GROUP_ROCKET_FUEL, TalentTemplate.TYPE_OUT, 0.05),\r\n    },\r\n    [T_GROUP_FUEL_REF] = {\r\n        talentTemplateSingle(T_NAME_FUEL_EFF, I_GROUP_FUEL, TalentTemplate.TYPE_TIME, 0.1),\r\n        talentTemplateSingle(T_NAME_FUEL_REF, I_GROUP_FUEL, TalentTemplate.TYPE_IN, 0.02),\r\n        talentTemplateSingle(T_NAME_ATMO_FUEL_REF, I_GROUP_ATMO_FUEL, TalentTemplate.TYPE_IN, 0.03),\r\n        talentTemplateSingle(T_NAME_SPACE_FUEL_REF, I_GROUP_SPACE_FUEL, TalentTemplate.TYPE_IN, 0.03),\r\n        talentTemplateSingle(T_NAME_ROCKET_FUEL_REF, I_GROUP_ROCKET_FUEL, TalentTemplate.TYPE_IN, 0.03)\r\n    },\r\n    [T_GROUP_INT_PART_PROD] = {\r\n        talentTemplateByTier(T_NAME_INT_PART_PROD, I_GROUP_INT_PART, TalentTemplate.TYPE_OUT, {1, 2, 3}, 1, true),\r\n    },\r\n    [T_GROUP_AMMO_PROD] = {\r\n        talentTemplateByTier(T_NAME_AMMO_EFF, I_GROUP_AMMO, TalentTemplate.TYPE_TIME, {2, 3}, 0.1),\r\n        talentTemplateByTierAndSize(T_NAME_AMMO_PROD, I_GROUP_AMMO, TalentTemplate.TYPE_OUT, {2,3}, {'XS', 'S', 'M', 'L'}, 1, true),\r\n    },\r\n    [T_GROUP_COMP_PART_MAN] = {\r\n        talentTemplateByTier(T_NAME_COMP_PART_MAN, I_GROUP_COMPLEX_PART, TalentTemplate.TYPE_TIME, {1, 2, 3, 4, 5}, 0.1),\r\n    },\r\n    [T_GROUP_EX_PART_MAN] = {\r\n        talentTemplateByTier(T_NAME_EX_PART_MAN, I_GROUP_EXCEPT_PART, TalentTemplate.TYPE_TIME, {3, 4, 5}, 0.1),\r\n    },\r\n    [T_GROUP_FUNC_PART_MAN] = {\r\n        talentTemplateByTier(T_NAME_FUNC_PART_MAN, I_GROUP_FUNC_PART, TalentTemplate.TYPE_TIME, {1, 2, 3, 4, 5}, 0.1),\r\n    },\r\n    [T_GROUP_STRUCT_PART_MAN] = {\r\n        talentTemplateByTier(T_NAME_STRUCT_PART_MAN, I_GROUP_STRUCT_PART, TalentTemplate.TYPE_TIME, {1, 2, 3, 4, 5}, 0.1),\r\n    },\r\n    [T_GROUP_INT_PART_MAN] = {\r\n        talentTemplateByTier(T_NAME_INT_PART_MAN, I_GROUP_INT_PART, TalentTemplate.TYPE_TIME, {1, 2, 3}, 0.1),\r\n    },\r\n    [T_GROUP_ORE_REF] = {\r\n        talentTemplateByTier(T_NAME_PURE_REF_EFF, I_GROUP_PURE, TalentTemplate.TYPE_TIME, {1, 2, 3, 4, 5}, 0.05),\r\n        talentTemplateByProduct(T_NAME_ORE_REF, I_GROUP_PURE, TalentTemplate.TYPE_IN, 0.03),\r\n    },\r\n    [T_GROUP_PURE_PROD] = {\r\n        talentTemplateByProduct(T_NAME_PURE_PROD, I_GROUP_PURE, TalentTemplate.TYPE_OUT, 0.03),\r\n    },\r\n    [T_GROUP_PROD_REF] = {\r\n        talentTemplateByTier(T_NAME_PROD_REF_EFF, I_GROUP_PRODUCT, TalentTemplate.TYPE_TIME, {1, 2, 3, 4, 5}, 0.05),\r\n        talentTemplateByProduct(T_NAME_PROD_REF, I_GROUP_PRODUCT, TalentTemplate.TYPE_IN, 0.03)\r\n    },\r\n    [T_GROUP_PROD_PROD] = {\r\n        talentTemplateByProduct(T_NAME_PROD_PROD, I_GROUP_PRODUCT, TalentTemplate.TYPE_OUT, 0.03),\r\n    },\r\n    --ignoring honeycomb on purpose\r\n    [T_GROUP_SCRAP_REF] = {\r\n        talentTemplateByTier(T_NAME_SCRAP_EFF, I_GROUP_SCRAP, TalentTemplate.TYPE_TIME, {1, 2, 3, 4, 5}, 0.1),\r\n        talentTemplateByTier(T_NAME_TIER_SCRAP_REF, I_GROUP_SCRAP, TalentTemplate.TYPE_IN, {1, 2, 3, 4, 5}, 1, true),\r\n        talentTemplateByProduct(T_NAME_SCRAP_REF, I_GROUP_SCRAP, TalentTemplate.TYPE_IN, 2, true),\r\n    },\r\n    [T_GROUP_SCRAP_PROD] = {\r\n        talentTemplateByProduct(T_NAME_SCRAP_PROD, I_GROUP_SCRAP, TalentTemplate.TYPE_OUT, 1, true),\r\n    },\r\n    --Industry Talents: Not in use since we have no way of retrieving the industries that produces each item\r\n}\nend)\npackage.preload['du-crafting-hud:du_lib/data/Talents.lua']=(function()\nrequire('du-crafting-hud:du_lib/requires/service.lua')\r\nrequire('du-crafting-hud:du_lib/data/ItemGroups.lua')\r\n\r\n---@type table<string, TalentTemplate[]>\r\nTALENT_TEMPLATES = require('du-crafting-hud:du_lib/data/raw/TalentTemplatesRaw.lua')\r\n\r\n---@class Talent\r\n---@field name string\r\n---@field level number\r\n---@field template TalentTemplate\r\n---@field product number id\r\n---@field tier number\r\n---@field size string\r\nTalent = {}\r\nTalent.__index = Talent\r\n\r\n---@param name string\r\n---@param level number\r\n---@param template TalentTemplate\r\n---@param product number id\r\n---@param tier number\r\n---@param size string\r\n---@return Talent\r\nlocal function talent(name, level, template, product, tier, size)\r\n    local self = --[[---@type self]] {}\r\n\r\n    self.name = name\r\n    self.level = level\r\n    self.template = template\r\n    self.product = product\r\n    self.tier = tier\r\n    self.size = size\r\n\r\n    return setmetatable(self, Talent)\r\nend\r\n\r\n---@type string[]\r\nlocal TIER_NAMES = { 'Basic', 'Uncommon', 'Advanced', 'Rare', 'Exotic' }\r\n\r\n---@class TalentsRepo : Service\r\nTalentsRepo = {}\r\nTalentsRepo.__index = TalentsRepo\r\n\r\n---@class TalentsRepoEvents\r\nTALENTS_REPO_EVENTS = {}\r\n---handler: func(self, talents)\r\nTALENTS_REPO_EVENTS.REFRESH = 'onRefresh'\r\n\r\n---@param system System\r\n---@param db Databank talent levels db\r\n---@return TalentsRepo\r\nfunction TalentsRepo.new(system, db)\r\n    local self = --[[---@type self]] Service.new()\r\n\r\n    ---@param permit CoroutinePermit\r\n    ---@return table<string, Talent[]>\r\n    local function loadTalents(permit)\r\n        ---@type table<string, Talent[]>\r\n        local talents = {}\r\n\r\n        for templateGroup, templates in pairs(TALENT_TEMPLATES) do\r\n            ---@type Talent[]\r\n            local groupTalents = {}\r\n            for _, template in ipairs(templates) do\r\n                permit.acquire()\r\n                local itemGroup = ItemGroup.findItemGroup(template.group)\r\n                if template.byProduct then\r\n                    local items = ItemGroup.getItemsInGroup(system, itemGroup, nil, nil)\r\n                    for _, itemId in ipairs(items) do\r\n                        permit.acquire()\r\n\r\n                        local item = system.getItem(itemId)\r\n                        local name = item.displayNameWithSize .. ' ' .. template.name\r\n                        local talent = talent(name, 0, template, itemId, nil, nil)\r\n                        table.insert(groupTalents, talent)\r\n                    end\r\n                elseif template.byTier then\r\n                    for _, tier in ipairs(template.byTier) do\r\n                        local tierName = TIER_NAMES[tier] .. ' ' .. template.name\r\n                        if template.bySize then\r\n                            for _, size in ipairs(template.bySize) do\r\n                                permit.acquire()\r\n\r\n                                local name = tierName .. ' ' .. size:upper()\r\n                                local talent = talent(name, 0, template, nil, tier, size)\r\n                                table.insert(groupTalents, talent)\r\n                            end\r\n                        else\r\n                            permit.acquire()\r\n\r\n                            local talent = talent(tierName, 0, template, nil, tier, nil)\r\n                            table.insert(groupTalents, talent)\r\n                        end\r\n                    end\r\n                else\r\n                    local name = template.group .. ' ' .. template.name\r\n                    local talent = talent(name, 0, template, nil, nil, nil)\r\n                    table.insert(groupTalents, talent)\r\n                end\r\n            end\r\n            talents[templateGroup] = groupTalents\r\n        end\r\n\r\n        return talents\r\n    end\r\n\r\n    ---@type table<string, Talent[]>\r\n    local talents\r\n    ---@param permit CoroutinePermit\r\n    local function refresh(permit)\r\n        if not talents then\r\n            talents = loadTalents(permit)\r\n        end\r\n\r\n        for _, groupTalents in pairs(talents) do\r\n            for _, talent in ipairs(groupTalents) do\r\n                permit.acquire()\r\n                local level = db.getIntValue(talent.name)\r\n                if level and level >= 0 then\r\n                    talent.level = level\r\n                end\r\n            end\r\n        end\r\n\r\n        self:triggerEvent(TALENTS_REPO_EVENTS.REFRESH, talents)\r\n    end\r\n\r\n    ---@param state State\r\n    function self.start(state)\r\n        state.registerCoroutine(self, 'TalentsRepo_refresh', refresh, true)\r\n    end\r\n\r\n    return setmetatable(self, TalentsRepo)\r\nend\nend)\npackage.preload['du-crafting-hud:du_lib/crafting/RecipeManager.lua']=(function()\nrequire('du-crafting-hud:du_lib/requires/service.lua')\r\nrequire('du-crafting-hud:du_lib/data/Talents.lua')\r\nrequire('du-crafting-hud:du_lib/data/ItemGroups.lua')\r\n\r\n---@class ItemTalentsEffect\r\n---@field timeDiscount number\r\n---@field inputFixedDiscount number\r\n---@field inputPercentDiscount number\r\n---@field outputFixedPremium number\r\n---@field outputPercentPremium number\r\nItemTalentsEffect = {}\r\n\r\n---@return ItemTalentsEffect\r\nfunction ItemTalentsEffect.new()\r\n    local self = --[[---@type self]] {}\r\n\r\n    self.timeDiscount = 0\r\n    self.inputFixedDiscount = 0\r\n    self.inputPercentDiscount = 0\r\n    self.outputFixedPremium = 0\r\n    self.outputPercentPremium = 0\r\n\r\n    ---@param talent Talent\r\n    function self.applyTalent(talent)\r\n        local template = talent.template\r\n        if template.type == TalentTemplate.TYPE_OUT then\r\n            if template.isFixedAmount then\r\n                self.outputFixedPremium = self.outputFixedPremium + template.amount * talent.level\r\n            else\r\n                self.outputPercentPremium = self.outputPercentPremium + template.amount * talent.level\r\n            end\r\n        elseif template.type == TalentTemplate.TYPE_IN then\r\n            if template.isFixedAmount then\r\n                self.inputFixedDiscount = self.inputFixedDiscount + template.amount * talent.level\r\n            else\r\n                self.inputPercentDiscount = self.inputPercentDiscount + template.amount * talent.level\r\n            end\r\n        elseif template.type == TalentTemplate.TYPE_TIME then\r\n            self.timeDiscount = self.timeDiscount + template.amount * talent.level\r\n        end\r\n    end\r\n\r\n    return setmetatable(self, ItemTalentsEffect)\r\nend\r\n\r\n---@param system System\r\n---@param group string\r\n---@param product number id\r\n---@param tier number\r\n---@param size string\r\n---@return number[] ids\r\nlocal function getAffectedItems(system, group, product, tier, size)\r\n    local itemGroup = ItemGroup.findItemGroup(group)\r\n\r\n    ---@type number[]\r\n    local items = {}\r\n\r\n    if product then\r\n        items = { product }\r\n    else\r\n        items = ItemGroup.getItemsInGroup(system, itemGroup, tier, size)\r\n    end\r\n\r\n    return items\r\nend\r\n\r\n---@param system System\r\n---@param talents table<string, Talent[]>\r\n---@param permit CoroutinePermit\r\n---@return table<number, ItemTalentsEffect>\r\nlocal function calculateTalents(system, talents, permit)\r\n    ---@type table<number, ItemTalentsEffect>\r\n    local calculatedTalents = {}\r\n\r\n    for _, talentGroup in pairs(talents) do\r\n        for _, talent in ipairs(talentGroup) do\r\n            permit.acquire()\r\n            local items = getAffectedItems(system, talent.template.group, talent.product, talent.tier, talent.size)\r\n\r\n            for _, item in ipairs(items) do\r\n                permit.acquire()\r\n                calculatedTalents[item] = calculatedTalents[item] or ItemTalentsEffect.new()\r\n                local itemTalentsEffect = calculatedTalents[item]\r\n                itemTalentsEffect.applyTalent(talent)\r\n            end\r\n        end\r\n    end\r\n\r\n    return calculatedTalents\r\nend\r\n\r\n---@class RecipeItem\r\n---@field id number\r\n---@field quantity number\r\n\r\n---@class Recipe\r\n---@field id number\r\n---@field tier number\r\n---@field time number\r\n---@field nanocraftable boolean\r\n---@field products RecipeItem[]\r\n---@field ingredients RecipeItem[]\r\n\r\n---@param system System\r\n---@param talentsEffects table<number, ItemTalentsEffect>\r\n---@param permit CoroutinePermit\r\n---@return table<number, Recipe>\r\nlocal function adjustRecipes(system, talentsEffects, permit)\r\n    ---@type table<number, Recipe>\r\n    local recipes = {}\r\n\r\n    for itemId, talentsEffect in pairs(talentsEffects) do\r\n        local recipe = RecipeManager.getRawRecipe(system, itemId)\r\n\r\n        recipe.time = recipe.time * (1 - talentsEffect.timeDiscount)\r\n\r\n        for _, output in ipairs(recipe.products) do\r\n            permit.acquire()\r\n            output.quantity = output.quantity * (1 + talentsEffect.outputPercentPremium) + talentsEffect.outputFixedPremium\r\n        end\r\n\r\n        for _, input in ipairs(recipe.ingredients) do\r\n            permit.acquire()\r\n            input.quantity = input.quantity * (1 - talentsEffect.inputPercentDiscount) + talentsEffect.inputFixedDiscount\r\n        end\r\n\r\n        recipes[itemId] = recipe\r\n    end\r\n\r\n    return recipes\r\nend\r\n\r\n---@class RecipeManager : Service\r\nRecipeManager = {}\r\nRecipeManager.__index = RecipeManager\r\n\r\n---@param system System\r\n---@param itemId number\r\n---@return Recipe\r\nfunction RecipeManager.getRawRecipe(system, itemId)\r\n    local recipes = --[[---@type Recipe[] ]] system.getRecipes(itemId)\r\n\r\n    for _, recipe in ipairs(recipes) do\r\n        if recipe.products[1].id == itemId then\r\n            return recipe\r\n        end\r\n    end\r\n\r\n    return nil\r\nend\r\n\r\n---@class RecipeManagerEvents\r\nRECIPE_MANAGER_EVENTS = {}\r\n---handler: func(self)\r\nRECIPE_MANAGER_EVENTS.REFRESH = 'onRefresh'\r\n\r\n---@param system System\r\n---@param talentsRepo TalentsRepo\r\n---@return RecipeManager\r\nfunction RecipeManager.new(system, talentsRepo)\r\n    local self = --[[---@type self]] Service.new()\r\n\r\n    ---@type table<string, Talent[]>\r\n    local talents\r\n    local function updateTalents(_, newTalents)\r\n        talents = newTalents\r\n    end\r\n\r\n    ---@type table<number, Recipe>\r\n    local adjustedRecipes\r\n    ---@type table<number, boolean>\r\n    local knownItems\r\n\r\n    ---@param permit CoroutinePermit\r\n    local function refresh(permit)\r\n        if not knownItems then\r\n            ---@type table<number, boolean>\r\n            local knownItemsInit = {}\r\n            for _, group in pairs(ITEM_GROUPS) do\r\n                local items = ItemGroup.getItemsInGroup(system, group, nil, nil)\r\n                for _, item in ipairs(items) do\r\n                    permit.acquire()\r\n                    knownItemsInit[item] = true\r\n                end\r\n                permit.yield() --no overloads for me ty!\r\n            end\r\n            knownItems = knownItemsInit\r\n        end\r\n        while not talents do\r\n            permit.yield()\r\n        end\r\n\r\n        local talentsEffects = calculateTalents(system, talents, permit)\r\n        adjustedRecipes = adjustRecipes(system, talentsEffects, permit)\r\n\r\n        self:triggerEvent(RECIPE_MANAGER_EVENTS.REFRESH)\r\n    end\r\n\r\n    ---@param itemId number\r\n    ---@return Recipe\r\n    function self.getAdjustedRecipe(itemId)\r\n        if not adjustedRecipes then\r\n            error(\"RecipeManager can't be called until refresh event is first emitted.\")\r\n        end\r\n\r\n        if not knownItems[itemId] then\r\n            error('Attempting to retrieve adjusted recipe for unknown item with id ' .. itemId)\r\n        end\r\n\r\n        local recipe = adjustedRecipes[itemId]\r\n        if not recipe then\r\n            recipe = RecipeManager.getRawRecipe(system, itemId)\r\n            adjustedRecipes[itemId] = recipe\r\n        end\r\n\r\n        if not recipe then\r\n            local msg = \"Could not find recipe for itemId \" .. itemId\r\n            local item = system.getItem(itemId)\r\n            if item and item.displayNameWithSize then\r\n                msg = msg .. ' ' .. item.displayNameWithSize\r\n            end\r\n            error(msg)\r\n        end\r\n\r\n        return recipe\r\n    end\r\n\r\n    ---@param state State\r\n    function self.start(state)\r\n        state.registerHandler(talentsRepo, TALENTS_REPO_EVENTS.REFRESH, updateTalents)\r\n        state.registerCoroutine(self, 'RecipeManager_refresh', refresh, true)\r\n    end\r\n\r\n    return setmetatable(self, RecipeManager)\r\nend\nend)\npackage.preload['du-crafting-hud:du_lib/crafting/SchematicCopiesManager.lua']=(function()\nrequire('du-crafting-hud:du_lib/requires/service.lua')\r\n\r\n---@class SchematicCopy\r\n---@field id number\r\n---@field products number[]\r\n---@field displayName string\r\n---@field cost number\r\nSchematicCopy = {}\r\n\r\n---@param id number\r\n---@param products number[]\r\n---@param displayName string\r\n---@return SchematicCopy\r\nlocal function schematic(id, products, displayName, cost)\r\n    return --[[---@type SchematicCopy]] {\r\n        id = id,\r\n        displayName = displayName,\r\n        products = products,\r\n        cost = cost,\r\n    }\r\nend\r\n\r\n---@class SchematicCopiesManagerEvents\r\nSCHEMATIC_COPIES_MANAGER_EVENT = {}\r\nSCHEMATIC_COPIES_MANAGER_EVENT.REFRESH = 'onRefresh'\r\n\r\n---@class SchematicCopiesManager : Service\r\nSchematicCopiesManager = {}\r\nSchematicCopiesManager.__index = SchematicCopiesManager\r\n\r\n---@type number[]\r\nSchematicCopiesManager.SCHEMATIC_COPY_IDS = { 86717297, 99491659, 109515712, 120427296, 210052275, 304578197, 318308564, 326757369, 363077945, 399761377, 425872842, 512435856, 616601802, 625377458, 632722426, 674258992, 690638651, 784932973, 787727253, 880043901, 1045229911, 1202149588, 1213081642, 1224468838, 1320378000, 1417495315, 1427639881, 1477134528, 1513927457, 1614573474, 1681671893, 1705420479, 1752968727, 1861676811, 1885016266, 1910482623, 1917988879, 1952035274, 1974208697, 2003602752, 2066101218, 2068774589, 2096799848, 2293088862, 2326433413, 2343247971, 2413250793, 2479827059, 2485530515, 2557110259, 2566982373, 2702634486, 2726927301, 2752973532, 2913149958, 3077761447, 3125069948, 3303272691, 3332597852, 3336558558, 3437488324, 3636126848, 3672319913, 3677281424, 3707339625, 3713463144, 3743434922, 3847207511, 3881438643, 3890840920, 3992802706, 4073976374, 4148773283, 4221430495 }\r\n\r\n---@param system System\r\n---@param schemCostDb Databank\r\n---@return SchematicCopiesManager\r\nfunction SchematicCopiesManager.new(system, schemCostDb)\r\n    local self = --[[---@type self]] Service.new()\r\n\r\n    ---@param schematicId number\r\n    ---@return number\r\n    local function getCost(schematicId)\r\n        return schemCostDb.getFloatValue(tostring(schematicId))\r\n    end\r\n\r\n    ---@type table<number, SchematicCopy>\r\n    local schematicCopies\r\n\r\n    ---@param permit CoroutinePermit\r\n    local function refresh(permit)\r\n        ---@type table<number, SchematicCopy>\r\n        local initSchematicCopies = {}\r\n\r\n        for _, schematicId in ipairs(SchematicCopiesManager.SCHEMATIC_COPY_IDS) do\r\n            permit.acquire()\r\n\r\n            local item = system.getItem(schematicId)\r\n            ---@type number[]\r\n            local products = item.products\r\n            if not products then\r\n                error('Schematic without products found: ' .. schematicId)\r\n            end\r\n\r\n            local cost = getCost(schematicId)\r\n            local schematic = schematic(schematicId, products, item.displayName, cost)\r\n            initSchematicCopies[schematicId] = schematic\r\n        end\r\n        schematicCopies = initSchematicCopies\r\n\r\n        self:triggerEvent(SCHEMATIC_COPIES_MANAGER_EVENT.REFRESH, schematicCopies)\r\n    end\r\n\r\n    ---@param itemId number\r\n    ---@return SchematicCopy\r\n    function self.getSchematicCopy(itemId)\r\n        if schematicCopies then\r\n            local item = system.getItem(itemId)\r\n            local schematicId = item.schematics[1]\r\n            return schematicCopies[schematicId]\r\n        else\r\n            return nil\r\n        end\r\n    end\r\n\r\n    ---@param state State\r\n    function self.start(state)\r\n        state.registerCoroutine(self, 'SchematicCopiesManager_refresh', refresh, true)\r\n    end\r\n\r\n    return setmetatable(self, SchematicCopiesManager)\r\nend\nend)\npackage.preload['du-crafting-hud:du_lib/crafting/CraftingCalculator.lua']=(function()\nrequire('du-crafting-hud:du_lib/requires/service.lua')\r\nrequire('du-crafting-hud:du_lib/crafting/SchematicCopiesManager.lua')\r\nrequire('du-crafting-hud:du_lib/crafting/RecipeManager.lua')\r\n\r\n---@class CraftingCostDirect\r\n---@field itemId number\r\n---@field quantity number\r\n---@field time number\r\n---@field schematics RecipeItem\r\n---@field byproducts table<number, number>\r\n---@field ingredients table<number, number>\r\nCraftingCostDirect = {}\r\nCraftingCostDirect.__index = CraftingCostDirect\r\n\r\n---@param itemId number\r\n---@param quantity number\r\n---@param recipeManager RecipeManager\r\n---@param schematicCopiesManager SchematicCopiesManager\r\n---@return CraftingCostDirect\r\nfunction CraftingCostDirect.calculate(itemId, quantity, recipeManager, schematicCopiesManager)\r\n    local recipe = recipeManager.getAdjustedRecipe(itemId)\r\n    local products = recipe.products\r\n    local unitMultiplier = quantity / products[1].quantity\r\n\r\n    local time = recipe.time * unitMultiplier\r\n\r\n    local schematicCopy = schematicCopiesManager.getSchematicCopy(itemId)\r\n    local schematics\r\n    if schematicCopy then\r\n        schematics = {\r\n            id = schematicCopy.id,\r\n            quantity = unitMultiplier\r\n        }\r\n    end\r\n\r\n    ---@type table<number, number>\r\n    local byproducts = {}\r\n    for i, product in ipairs(products) do\r\n        if i > 1 then\r\n            byproducts[product.id] = product.quantity * unitMultiplier\r\n        end\r\n    end\r\n\r\n    ---@type table<number, number>\r\n    local ingredients = {}\r\n    for _, ingredient in ipairs(recipe.ingredients) do\r\n        ingredients[ingredient.id] = ingredient.quantity * unitMultiplier\r\n    end\r\n\r\n    return --[[---@type CraftingCostDirect]] {\r\n        itemId = itemId,\r\n        quantity = quantity,\r\n        time = time,\r\n        schematics = schematics,\r\n        byproducts = byproducts,\r\n        ingredients = ingredients\r\n    }\r\nend\r\n\r\n---@class CraftingCostItem\r\n---@field quantity number\r\n---@field cost number\r\n---@field industries number\r\n\r\n---@param quantity number\r\n---@param cost number\r\n---@param industries number\r\n---@return CraftingCostItem\r\nlocal function craftingCostItem(quantity, cost, industries)\r\n    return --[[---@type CraftingCostItem]] {\r\n        quantity = quantity,\r\n        cost = cost,\r\n        industries = industries\r\n    }\r\nend\r\n\r\n---@class CraftingCost\r\n---@field __index CraftingCost\r\n---@field itemId number\r\n---@field quantity number\r\n---@field totalCost number\r\n---@field industries number\r\n---@field directCost CraftingCost\r\n---@field schematics table<number, CraftingCostItem> itemId to quantity\r\n---@field byproducts table<number, CraftingCostItem> itemId to quantity\r\n---@field ingredients table<number, CraftingCostItem> itemId to quantity\r\nCraftingCost = {}\r\nCraftingCost.__index = CraftingCost\r\n\r\n---@param itemId number\r\n---@param oresCostDb Databank\r\n---@param recipeManager RecipeManager\r\n---@param schematicCopiesManager SchematicCopiesManager\r\n---@param system System\r\n---@param quantity number\r\n---@param permit CoroutinePermit\r\n---@param timeframe number\r\n---@param recursive boolean\r\n---@return CraftingCost\r\n---@overload fun(itemId: number, oresCostDb: Databank, recipeManager: RecipeManager, schematicCopiesManager: SchematicCopiesManager, system: System, permit: CoroutinePermit, quantity: number): CraftingCost\r\nfunction CraftingCost.calculate(itemId, oresCostDb, recipeManager, schematicCopiesManager, system, permit, quantity, timeframe, recursive)\r\n    local self = --[[---@type self]] {}\r\n\r\n    if recursive == nil then\r\n        recursive = true\r\n    end\r\n\r\n    self.itemId = itemId\r\n    self.totalCost = 0\r\n    self.directCost = nil\r\n    self.schematics = {}\r\n    self.byproducts = {}\r\n    self.ingredients = {}\r\n\r\n    if quantity then\r\n        quantity = quantity\r\n    else\r\n        local unitCost = CraftingCostDirect.calculate(itemId, 1, recipeManager, schematicCopiesManager)\r\n        quantity = 24 * 3600 / unitCost.time --quantity in 24h\r\n    end\r\n    permit.acquire()\r\n    local directCost = CraftingCostDirect.calculate(itemId, quantity, recipeManager, schematicCopiesManager)\r\n    self.quantity = quantity\r\n\r\n    timeframe = timeframe or directCost.time\r\n    self.industries = directCost.time / timeframe\r\n\r\n    if recursive then\r\n        permit.acquire()\r\n        self.directCost = CraftingCost.calculate(itemId, oresCostDb, recipeManager, schematicCopiesManager, system, permit, quantity, timeframe, false)\r\n    end\r\n\r\n    ---@param itemId number\r\n    ---@param newItem CraftingCostItem\r\n    ---@param addToTable table<number, CraftingCostItem>\r\n    local function addCostItem(itemId, newItem, addToTable)\r\n        permit.acquire()\r\n        local item = addToTable[itemId]\r\n        if item then\r\n            item.quantity = item.quantity + newItem.quantity\r\n            item.cost = item.cost + newItem.cost\r\n        else\r\n            item = newItem\r\n        end\r\n\r\n        addToTable[itemId] = item\r\n    end\r\n\r\n    ---@param cost CraftingCost\r\n    local function mergeCost(cost)\r\n        for schematicId, schematic in pairs(cost.schematics) do\r\n            addCostItem(schematicId, schematic, self.schematics)\r\n        end\r\n\r\n        for byproductId, byproduct in pairs(cost.byproducts) do\r\n            addCostItem(byproductId, byproduct, self.byproducts)\r\n        end\r\n\r\n        for ingredientId, ingredient in pairs(cost.ingredients) do\r\n            addCostItem(ingredientId, ingredient, self.ingredients)\r\n        end\r\n    end\r\n\r\n    ---@param directCost CraftingCostDirect\r\n    local function add(directCost)\r\n        local totalCost = 0\r\n        if directCost.schematics then\r\n            local quantity = directCost.schematics.quantity\r\n            local copy = schematicCopiesManager.getSchematicCopy(itemId)\r\n\r\n            if not copy.cost or copy.cost == 0 then\r\n                local msg = 'Failed to find cost for schematic in schematics cost db ' .. copy.displayName\r\n                system.print(msg)\r\n                error(msg)\r\n            end\r\n\r\n            local cost = quantity * copy.cost\r\n\r\n            totalCost = totalCost + cost\r\n            addCostItem(directCost.schematics.id, craftingCostItem(quantity, cost, nil), self.schematics)\r\n        end\r\n\r\n        for byproductId, byproductQuantity in pairs(directCost.byproducts) do\r\n            local byproductCost = CraftingCost.calculate(byproductId, oresCostDb, recipeManager, schematicCopiesManager,\r\n                    system, permit, byproductQuantity, timeframe, true)\r\n\r\n            totalCost = totalCost - byproductCost.totalCost\r\n            local costItem = craftingCostItem(byproductQuantity, byproductCost.totalCost, nil)\r\n            addCostItem(byproductId, costItem, self.byproducts)\r\n        end\r\n\r\n        for ingredientId, ingredientQuantity in pairs(directCost.ingredients) do\r\n            local cost, industries\r\n            if RecipeManager.getRawRecipe(system, ingredientId) then\r\n                local ingredientCost = CraftingCost.calculate(ingredientId, oresCostDb, recipeManager,\r\n                        schematicCopiesManager, system, permit, ingredientQuantity, timeframe, true)\r\n                if recursive then\r\n                    mergeCost(ingredientCost)\r\n                end\r\n\r\n                cost = ingredientCost.totalCost\r\n                industries = ingredientCost.industries\r\n            else --ores\r\n                local oreCost = oresCostDb.getFloatValue(tostring(ingredientId))\r\n                if not oreCost or oreCost == 0 then\r\n                    local msg = 'Failed to find cost for ore in oreDb ' .. system.getItem(ingredientId).displayName\r\n                    system.print(msg)\r\n                    error(msg)\r\n                end\r\n                cost = oreCost * ingredientQuantity\r\n                industries = nil\r\n            end\r\n            totalCost = totalCost + cost\r\n            local costItem = craftingCostItem(ingredientQuantity, cost, industries)\r\n            addCostItem(ingredientId, costItem, self.ingredients)\r\n        end\r\n\r\n        self.totalCost = totalCost\r\n    end\r\n\r\n    add(directCost)\r\n\r\n    return setmetatable(self, CraftingCost)\r\nend\r\n\r\n---@class CraftingCalculator : Service\r\nCraftingCalculator = {}\r\nCraftingCalculator.__index = CraftingCalculator\r\n\r\n---@class CraftingCalculatorEvents\r\nCRAFTING_CALCULATOR_EVENT = {}\r\nCRAFTING_CALCULATOR_EVENT.INIT = 'onInit'\r\n\r\n---@param system System\r\n---@param recipeManager RecipeManager\r\n---@param schematicCopiesManager SchematicCopiesManager\r\n---@param oresCostDb Databank\r\n---@return CraftingCalculator\r\nfunction CraftingCalculator.new(system, recipeManager, schematicCopiesManager, oresCostDb)\r\n    local self = --[[---@type self]] Service.new()\r\n\r\n    local recipeManagerDone\r\n    local schematicManagerDone\r\n\r\n    local function recipeManagerRefresh()\r\n        recipeManagerDone = true\r\n        if schematicManagerDone then\r\n            self:triggerEvent(CRAFTING_CALCULATOR_EVENT.INIT)\r\n        end\r\n    end\r\n\r\n    local function schematicManagerRefresh()\r\n        schematicManagerDone = true\r\n        if recipeManagerDone then\r\n            self:triggerEvent(CRAFTING_CALCULATOR_EVENT.INIT)\r\n        end\r\n    end\r\n\r\n    ---this needs to be run as a coroutine\r\n    ---@param itemId number\r\n    ---@param mode \"day\" | \"unit\"\r\n    ---@param permit CoroutinePermit\r\n    ---@return CraftingCost\r\n    function self.calculate(itemId, mode, permit)\r\n        if not (schematicManagerDone and recipeManagerDone) then\r\n            error(\"Crafting calculator can't be called until the 'onInit' event has been emitted.\")\r\n        end\r\n\r\n        local quantity\r\n        if mode == 'day' then\r\n            quantity = nil\r\n        elseif mode == 'unit' then\r\n            quantity = 1\r\n        else\r\n            error('Invalid mode: ' .. mode)\r\n        end\r\n        return CraftingCost.calculate(itemId, oresCostDb, recipeManager, schematicCopiesManager, system, permit, quantity)\r\n    end\r\n\r\n    ---@param state State\r\n    function self.start(state)\r\n        state.registerHandler(recipeManager, RECIPE_MANAGER_EVENTS.REFRESH, recipeManagerRefresh)\r\n        state.registerHandler(schematicCopiesManager, SCHEMATIC_COPIES_MANAGER_EVENT.REFRESH, schematicManagerRefresh)\r\n    end\r\n\r\n    return setmetatable(self, CraftingCalculator)\r\nend\nend)\npackage.preload['du-crafting-hud:du_lib/data_hud/FullDataHudData.lua']=(function()\n---@class FullDataHudData\r\n---@field groups string[]\r\n---@field headers string[]\r\n---@field rows string[][]\r\n---@field title string\r\nFullDataHudData = {}\r\nFullDataHudData.__index = FullDataHudData\r\n\r\n---@param groups string[] | nil\r\n---@param headers string[]\r\n---@param rows string[][]\r\n---@param title string\r\n---@overload fun(title: string, headers: string[], rows: string[][]) : FullDataHudData\r\n---@return FullDataHudData\r\nfunction FullDataHudData.new(title, headers, rows, groups)\r\n    local self = --[[---@type self]] { }\r\n\r\n    self.groups = --[[---@type string[] ]] groups\r\n    self.headers = headers\r\n    self.rows = rows\r\n    self.title = title\r\n\r\n    return setmetatable(self, FullDataHudData)\r\nend\nend)\npackage.preload['du-crafting-hud:du_lib/utils/fn_duCurrentDateTime.lua']=(function()\nreturn function(utc)\r\n    local t = system.getUtcTime()\r\n    if not utc then t = t + system.getUtcOffset() end\r\n    local DSEC=24*60*60\r\n    local YSEC=365*DSEC\r\n    local LSEC=YSEC+DSEC\r\n    local FSEC=4*YSEC+DSEC\r\n    local BASE_DOW=4\r\n    local BASE_YEAR=1970\r\n    local _days={-1, 30, 58, 89, 119, 150, 180, 211, 242, 272, 303, 333, 364}\r\n    local _lpdays={}\r\n    for i=1,2  do _lpdays[i]=_days[i]   end\r\n    for i=3,13 do _lpdays[i]=_days[i]+1 end\r\n    local y,j,m,d,w,h,n,s\r\n    local mdays=_days\r\n    s=t\r\n    y=math.floor(s/FSEC)\r\n    s=s-y*FSEC\r\n    y=y*4+BASE_YEAR\r\n    if s>=YSEC then\r\n        y=y+1\r\n        s=s-YSEC\r\n        if s>=YSEC then\r\n            y=y+1\r\n            s=s-YSEC\r\n            if s>=LSEC then\r\n                y=y+1\r\n                s=s-LSEC\r\n            else\r\n                mdays=_lpdays\r\n            end\r\n        end\r\n    end\r\n    j=math.floor(s/DSEC)\r\n    s=s-j*DSEC\r\n    local m=1\r\n    while mdays[m]<j do m=m+1 end\r\n    m=m-1\r\n    local d=j-mdays[m]\r\n    w=(math.floor(t/DSEC)+BASE_DOW)%7\r\n    if w == 0 then w = 7 end\r\n    h=math.floor(s/3600)\r\n    s=s-h*3600\r\n    n=math.floor(s/60)\r\n    function round(a,b)if b then return utils.round(a/b)*b end;return a>=0 and math.floor(a+0.5)or math.ceil(a-0.5)end\r\n    s=round(s-n*60)\r\n    local weekDaysNames = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"}\r\n    local weekDaysShortNames = {\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"}\r\n    local monthNames = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"}\r\n    local monthShortNames = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}\r\n    return y,m,d,h,n,s,w,weekDaysNames[w],weekDaysShortNames[w],monthNames[m],monthShortNames[m],j+1\r\nend\nend)\npackage.preload['du-crafting-hud:du_lib/data_hud/FullDataHud.lua']=(function()\nrequire('du-crafting-hud:du_lib/requires/service.lua')\r\nrequire('du-crafting-hud:du_lib/data_hud/FullDataHudData.lua')\r\nlocal duCurrentDateTime = require('du-crafting-hud:du_lib/utils/fn_duCurrentDateTime.lua')\r\n\r\n---@class FullDataHudEvents\r\nFULL_DATA_HUD_EVENTS = {}\r\n---handler: func(self, groupIndex)\r\nFULL_DATA_HUD_EVENTS.GROUP_SELECTED = 'onGroupSelected'\r\n---handler: func(self, detailIndex)\r\nFULL_DATA_HUD_EVENTS.DETAIL_SELECTED = 'onDetailSelected'\r\n---handler: func(self, groupIndex, detailIndex)\r\nFULL_DATA_HUD_EVENTS.DETAIL_ACTION_RIGHT = 'onDetailActionRight'\r\n---handler: func(self, groupIndex, detailIndex)\r\nFULL_DATA_HUD_EVENTS.DETAIL_ACTION_LEFT = 'onDetailActionLeft'\r\n---handler: func(self, groupIndex, detailIndex)\r\nFULL_DATA_HUD_EVENTS.DETAIL_ACTION_DOWN = 'onDetailActionDown'\r\n---handler: func(self, groupIndex, detailIndex)\r\nFULL_DATA_HUD_EVENTS.DETAIL_ACTION_UP = 'onDetailActionUp'\r\n---handler: func(self, groupIndex)\r\nFULL_DATA_HUD_EVENTS.GROUP_ACTION_RIGHT = 'onGroupActionRight'\r\n---handler: func(self, groupIndex)\r\nFULL_DATA_HUD_EVENTS.GROUP_ACTION_LEFT = 'onGroupActionLeft'\r\n\r\n---@class FullDataHud : Service\r\nFullDataHud = {}\r\nFullDataHud.__index = FullDataHud\r\n\r\nlocal function getHudHelpHtml(title)\r\n    local year, month, day, hour, minute, second, _, _, _, _, _, _ = duCurrentDateTime(nil)\r\n    local dateStr = string.format(\"%02d/%02d/%04d %02d:%02d:%02d\", day, month, year, hour, minute, second)\r\n    return table.concat({[[<div class=\"hud_help_commands hud_container\">\r\n    <table>\r\n        <tr><th>]], title, [[</th></tr>\r\n        <tr>\r\n            <th colspan=\"2\">\r\n                ]], dateStr, [[\r\n            </th>\r\n        </tr>\r\n        <tr>\r\n            <td>Show/Hide HUD</td>\r\n            <th style=\"text-align:right;\">Alt+2</th>\r\n        </tr>\r\n    </table>\r\n</div>]]})\r\nend\r\n\r\nlocal function getHudMainCss(contentFontSize, hideGroups)\r\n    local detailsContainerOffset = 20\r\n    if hideGroups then\r\n        detailsContainerOffset = 1\r\n    end\r\n    return table.concat({[[\r\n    <style>\r\n\t   * {\r\n\t\t  font-size: ]], tostring(contentFontSize), [[px;\r\n\t   }\r\n        .hud_container {\r\n            border: 2px solid orange;\r\n            border-radius:10px;\r\n            background-color: rgba(0,0,0,.75);\r\n            padding:10px;\r\n        }\r\n        .hud_help_commands {\r\n            position: absolute;\r\n            top: 1vh;\r\n            left: 1vw;\r\n            text-transform: uppercase;\r\n            font-weight: bold;\r\n        }\r\n        .hud_list_container {\r\n            position: absolute;\r\n            top: 17vh;\r\n            left: 1vw;\r\n            text-transform: uppercase;\r\n            font-weight: bold;\r\n        }\r\n        .hud_machines_container {\r\n            position: absolute;\r\n            top: 17vh;\r\n            left: ]], tostring(detailsContainerOffset), [[vw;\r\n        }\r\n        .elementType {\r\n            margin-top:10px;\r\n            border-radius:5px;\r\n        }\r\n        .elementType.selected {\r\n            border: 2px solid green;\r\n            background-color: rgba(0,200,0,.45);\r\n        }\r\n        tr.selected td, tr.selected th{\r\n            border: 2px solid green;\r\n            background-color: rgba(0,200,0,.1);\r\n        }\r\n        td, th {\r\n            border-bottom:1px solid white;\r\n            padding:5px;\r\n            text-align: center;\r\n        }\r\n        th {\r\n            font-weight: bold;\r\n        }\r\n        .text-success{color: #28a745;}\r\n        .text-danger{color:#dc3545;}\r\n        .text-warning{color:#ffc107;}\r\n        .text-info{color:#17a2b8;}\r\n        .text-primary{color:#007bff;}\r\n        .text-orangered{color:orangered;}\r\n        .bg-success{background-color: #28a745;}\r\n        .bg-danger{background-color:#dc3545;}\r\n        .bg-warning{background-color:#ffc107;}\r\n        .bg-info{background-color:#17a2b8;}\r\n        .bg-primary{background-color:#007bff;}\r\n    </style>\r\n]]})\r\nend\r\n\r\nlocal function getHudLoadingHtml()\r\n    return [[\r\n            <div class=\"hud_list_container hud_container\">\r\n            \t<table style=\"width:100%\">\r\n            \t\t<tr>\r\n            \t\t\t<th>LOADING...</th>\r\n            \t\t</tr>\r\n            \t</table>\r\n            </div>\r\n        ]]\r\nend\r\n\r\n---@return number\r\nlocal function minOnPage(page, pageSize)\r\n    return ((page - 1) * pageSize) + 1\r\nend\r\n\r\nlocal function maxOnPage(page, pageSize, lastItem)\r\n    return math.min(page * pageSize, lastItem)\r\nend\r\n\r\n---@param groups string[]\r\nlocal function renderGroupsHtml(groups, selectedGroupIndex, groupsByPage)\r\n    ---@type string[]\r\n    local groupsHtml = { [[<div class=\"hud_list_container hud_container\">\r\n                <div style=\"text-align:center;font-weight:bold;border-bottom:1px solid white;\">&#x2191; &nbsp;&nbsp; Ctrl+Arrow Up</div>\r\n            ]]}\r\n\r\n    local page = math.floor((selectedGroupIndex - 1) / groupsByPage) + 1\r\n    local minOnPage = minOnPage(page, groupsByPage)\r\n    local maxOnPage = maxOnPage(page, groupsByPage, #groups)\r\n\r\n    for i = minOnPage, maxOnPage do\r\n        local group = groups[i]\r\n        table.insert(groupsHtml, '<div class=\"elementType')\r\n        if i == selectedGroupIndex then\r\n            table.insert(groupsHtml, \" selected\")\r\n        end\r\n\r\n        table.insert(groupsHtml, [[\">\r\n                    <table style=\"width:100%;\">\r\n                        <tr>\r\n                            <th style=\"text-align:left;border-bottom:none;\">]])\r\n        table.insert(groupsHtml, group)\r\n        table.insert(groupsHtml, [[</th>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                ]])\r\n    end\r\n\r\n    table.insert(groupsHtml, [[<div style=\"margin-top:10px;text-align:center;font-weight:bold;border-top:1px solid white;\">&#x2193; &nbsp;&nbsp; Ctrl+Arrow Down</div></div>]])\r\n\r\n    return table.concat(groupsHtml)\r\nend\r\n\r\n---@param system System\r\n---@param contentFontSize number\r\n---@param elementsByPage number\r\n---@param groupsByPage number\r\n---@overload fun(system: System, contentFontSize: number, elementsByPage: number) : FullDataHud\r\n---@return FullDataHud\r\nfunction FullDataHud.new(system, contentFontSize, elementsByPage, groupsByPage)\r\n    local self = --[[---@type self]] Service.new()\r\n\r\n    local hudMainCss = getHudMainCss(contentFontSize, not groupsByPage)\r\n    local hudMinimalHtml = hudMainCss .. getHudHelpHtml('Hud Loading')\r\n    local hudLoadingHtml = hudMinimalHtml .. getHudLoadingHtml()\r\n\r\n    ---@type FullDataHudData\r\n    local data\r\n\r\n    local hudDisplayed = true\r\n    local selectedGroupIndex = 1\r\n    local selectedDetailIndex = 1\r\n    local page = 1\r\n    local maxPage = 1\r\n\r\n    local controlPressed = false\r\n    local altPressed = false\r\n\r\n    ---@param newData FullDataHudData\r\n    function self.updateData(newData)\r\n        data = newData\r\n        if data.rows then\r\n            maxPage = math.ceil(#data.rows / elementsByPage)\r\n        end\r\n    end\r\n\r\n    function self.setSelected(groupIndex, detailIndex)\r\n        selectedGroupIndex = groupIndex\r\n        selectedDetailIndex = detailIndex\r\n\r\n        page = math.floor((selectedDetailIndex - 1) / elementsByPage) + 1\r\n\r\n        self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_SELECTED, selectedGroupIndex)\r\n        self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\r\n    end\r\n\r\n    local hudHtml = ''\r\n    local function updateHud()\r\n        local data = data\r\n\r\n        if data and data.title then\r\n            hudMinimalHtml = hudMainCss .. getHudHelpHtml(data.title)\r\n        end\r\n\r\n        if not hudDisplayed then\r\n            hudHtml = hudMinimalHtml\r\n            return\r\n        elseif not data then\r\n            hudHtml = hudLoadingHtml\r\n            return\r\n        end\r\n\r\n        local groupsHtml = ''\r\n        if groupsByPage and data.groups then\r\n            groupsHtml = renderGroupsHtml(data.groups, selectedGroupIndex, groupsByPage)\r\n        end\r\n\r\n        if not data.rows then\r\n            if data.groups then\r\n                hudHtml = hudMinimalHtml .. groupsHtml\r\n            else\r\n                hudHtml = hudLoadingHtml .. groupsHtml\r\n            end\r\n            return\r\n        end\r\n\r\n        local minOnPage = minOnPage(page, elementsByPage)\r\n        local maxOnPage = maxOnPage(page, elementsByPage, #data.rows)\r\n\r\n        ---@type (string | number)[]\r\n        local detailsHtml = {[[<div class=\"hud_machines_container hud_container\">\r\n                <div style=\"text-align:center;font-weight:bold;border-bottom:1px solid white;\">&#x2191; &nbsp;&nbsp; Arrow Up</div>\r\n                <table class=\"elements_table\" style=\"width:100%\">\r\n                    <tr>\r\n                        <th>&#x2190; &nbsp;&nbsp; Arrow Left</th>\r\n                        <th> Page ]], page, [[/]], maxPage, [[ (from ]], minOnPage, [[ to ]], maxOnPage, [[)</th>\r\n                        <th>Arrow Right &nbsp;&nbsp; &#x2192;</th>\r\n                    </tr>\r\n                </table>\r\n                <table class=\"elements_table\" style=\"width:100%;\">\r\n                    <tr>]]}\r\n\r\n        for _, header in ipairs(data.headers) do\r\n            table.insert(detailsHtml, '<th>')\r\n            table.insert(detailsHtml, header)\r\n            table.insert(detailsHtml, '</th>')\r\n        end\r\n        table.insert(detailsHtml, '</tr>')\r\n\r\n        for i = minOnPage, maxOnPage do\r\n            local row = data.rows[i]\r\n\r\n            table.insert(detailsHtml, [[<tr]])\r\n            if selectedDetailIndex == i then\r\n                table.insert(detailsHtml, [[ class=\"selected\"]])\r\n            end\r\n            table.insert(detailsHtml, '>')\r\n\r\n            for _, value in ipairs(row) do\r\n                table.insert(detailsHtml, [[<th>]])\r\n                table.insert(detailsHtml, value)\r\n                table.insert(detailsHtml, '</th>')\r\n            end\r\n            table.insert(detailsHtml, '</tr>')\r\n        end\r\n\r\n        table.insert(detailsHtml, [[</table>\r\n            <table class=\"elements_table\" style=\"width:100%\">\r\n                <tr>\r\n                    <th>&#x2190; &nbsp;&nbsp; Arrow Left</th>\r\n                    <th> Page ]])\r\n        table.insert(detailsHtml, page)\r\n        table.insert(detailsHtml, '/')\r\n        table.insert(detailsHtml, maxPage)\r\n        table.insert(detailsHtml, ' (from ')\r\n        table.insert(detailsHtml, minOnPage)\r\n        table.insert(detailsHtml, ' to ')\r\n        table.insert(detailsHtml, maxOnPage)\r\n        table.insert(detailsHtml, [[)</th>\r\n                    <th>Arrow Right &nbsp;&nbsp; &#x2192;</th>\r\n                </tr>\r\n            </table>\r\n            <div style=\"text-align:center;font-weight:bold;border-top:1px solid white;\">&#x2193; &nbsp;&nbsp; Arrow Down</div>\r\n            </div>]])\r\n\r\n        hudHtml = hudMinimalHtml .. groupsHtml .. table.concat(detailsHtml)\r\n    end\r\n\r\n    local function onStartBrake()\r\n        controlPressed = true\r\n    end\r\n\r\n    local function onStopBrake()\r\n        controlPressed = false\r\n    end\r\n\r\n    local function onStartAlt()\r\n        altPressed = true\r\n    end\r\n\r\n    local function onStopAlt()\r\n        altPressed = false\r\n    end\r\n\r\n    local function onStartDown()\r\n        if not hudDisplayed then\r\n            return\r\n        end\r\n        local data = data\r\n        if data.groups and controlPressed == true then\r\n            if selectedGroupIndex < #data.groups then\r\n                selectedGroupIndex = selectedGroupIndex + 1\r\n                selectedDetailIndex = 1\r\n                page = 1\r\n\r\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_SELECTED, selectedGroupIndex)\r\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\r\n            end\r\n        elseif data.rows then\r\n            if altPressed then\r\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_ACTION_DOWN, selectedGroupIndex, selectedDetailIndex)\r\n            elseif selectedDetailIndex < maxOnPage(page, elementsByPage, #data.rows) then\r\n                selectedDetailIndex = selectedDetailIndex + 1\r\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\r\n            elseif page < maxPage then\r\n                page = page + 1\r\n                selectedDetailIndex = minOnPage(page, elementsByPage)\r\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\r\n            end\r\n        end\r\n    end\r\n\r\n    local function onStartUp()\r\n        if not hudDisplayed then\r\n            return\r\n        end\r\n        local data = data\r\n        if data.groups and controlPressed then\r\n            if selectedGroupIndex > 1 then\r\n                selectedGroupIndex = selectedGroupIndex - 1\r\n                selectedDetailIndex = 1\r\n                page = 1\r\n\r\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_SELECTED, selectedGroupIndex)\r\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\r\n            end\r\n        elseif data.rows then\r\n            if altPressed then\r\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_ACTION_UP, selectedGroupIndex, selectedDetailIndex)\r\n            elseif selectedDetailIndex > minOnPage(page, elementsByPage) then\r\n                selectedDetailIndex = selectedDetailIndex - 1\r\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\r\n            elseif page > 1 then\r\n                page = page - 1\r\n                selectedDetailIndex = maxOnPage(page, elementsByPage, #data.rows)\r\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\r\n            end\r\n        end\r\n    end\r\n\r\n    local function onStartStrafeLeft()\r\n        if not hudDisplayed then\r\n            return\r\n        end\r\n        if altPressed then\r\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_ACTION_LEFT, selectedGroupIndex, selectedDetailIndex)\r\n        elseif controlPressed then\r\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_ACTION_LEFT, selectedGroupIndex)\r\n        elseif page > 1 then\r\n            page = page - 1\r\n            selectedDetailIndex = minOnPage(page, elementsByPage)\r\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\r\n        end\r\n    end\r\n\r\n    local function onStartStrafeRight()\r\n        if not hudDisplayed then\r\n            return\r\n        end\r\n        if altPressed then\r\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_ACTION_RIGHT, selectedGroupIndex, selectedDetailIndex)\r\n        elseif controlPressed then\r\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_ACTION_RIGHT, selectedGroupIndex)\r\n        elseif page < maxPage then\r\n            page = page + 1\r\n            selectedDetailIndex = minOnPage(page, elementsByPage)\r\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\r\n        end\r\n    end\r\n\r\n    local function onStartOption2()\r\n        hudDisplayed = not hudDisplayed\r\n    end\r\n\r\n    self.hasHud = true\r\n    ---@return string\r\n    function self.drawHud()\r\n        return hudHtml\r\n    end\r\n\r\n    ---@param state State\r\n    function self.start(state)\r\n        state.registerTimer('FullDataHud_updateUi', 0.1, updateHud)\r\n        state.registerHandler(system, SYSTEM_EVENTS.ACTION_STOP, DuLuacUtils.createHandler({\r\n            [LUA_ACTIONS.BRAKE] = onStopBrake,\r\n            [LUA_ACTIONS.LALT] = onStopAlt,\r\n        }))\r\n        state.registerHandler(system, SYSTEM_EVENTS.ACTION_START, DuLuacUtils.createHandler({\r\n            [LUA_ACTIONS.BRAKE] = onStartBrake,\r\n            [LUA_ACTIONS.LALT] = onStartAlt,\r\n            [LUA_ACTIONS.DOWN] = onStartDown,\r\n            [LUA_ACTIONS.UP] = onStartUp,\r\n            [LUA_ACTIONS.OPTION2] = onStartOption2,\r\n            [LUA_ACTIONS.STRAFELEFT] = onStartStrafeLeft,\r\n            [LUA_ACTIONS.STRAFERIGHT] = onStartStrafeRight,\r\n        }))\r\n\r\n        self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_SELECTED, selectedGroupIndex)\r\n        self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\r\n    end\r\n\r\n    return setmetatable(self, FullDataHud)\r\nend\nend)\npackage.preload['du-crafting-hud:du_lib/requires/dataHud.lua']=(function()\nrequire('du-crafting-hud:du_lib/requires/service.lua')\r\nrequire('du-crafting-hud:du_lib/data_hud/FullDataHudData.lua')\r\nrequire('du-crafting-hud:du_lib/data_hud/FullDataHud.lua')\nend)\npackage.preload['du-crafting-hud:du_lib/general/DatabankHud.lua']=(function()\nrequire('du-crafting-hud:du_lib/requires/service.lua')\r\nrequire('du-crafting-hud:du_lib/requires/dataHud.lua')\r\n\r\n---@class DbEntry\r\n---@field key string\r\n---@field label string\r\nDbEntry = {}\r\n\r\n---@param key string | number\r\n---@param label string | nil\r\n---@return DbEntry\r\n---@overload fun(key: string | number): DbEntry\r\nfunction DbEntry.new(key, label)\r\n    return --[[---@type DbEntry]] {\r\n        key = tostring(key),\r\n        label = label or key\r\n    }\r\nend\r\n\r\n---@class DatabankHud : Service\r\n---@field __index DatabankHud\r\nDatabankHud = {}\r\nDatabankHud.__index = DatabankHud\r\n\r\n---@param system System\r\n---@param db Databank\r\n---@param valueType string 'string', 'float', 'int'\r\n---@param hud FullDataHud\r\n---@param title string\r\n---@param keys table<string, DbEntry[]> | table<string, DbEntry[]>\r\n---@overload fun(system: System, db: Databank, valueType: string, hud: FullDataHud, title: string) : DatabankHud\r\n---@return DatabankHud\r\nfunction DatabankHud.new(system, db, valueType, hud, title, keys)\r\n    local self = --[[---@type self]] Service.new()\r\n\r\n    local initDone\r\n    ---@type table<string, DbEntry[]>\r\n    local groups\r\n    ---@type string[]\r\n    local groupNames\r\n    ---@param permit CoroutinePermit\r\n    local function initDb(permit)\r\n        while not keys do\r\n            permit.yield()\r\n        end\r\n\r\n        groups = {}\r\n        groupNames = {}\r\n        ---@type table<string, boolean>\r\n        local knownKeys = {}\r\n        for group, keys in pairs(keys) do\r\n            table.insert(groupNames, group)\r\n            ---@type DbEntry[]\r\n            local groupKeys = {}\r\n            for _, entry in ipairs(keys) do\r\n                permit.acquire()\r\n                local key = entry.key\r\n                if knownKeys[key] then\r\n                    error('Found duplicate key: ' .. key)\r\n                end\r\n                knownKeys[key] = true\r\n                table.insert(groupKeys, entry)\r\n                if db.hasKey(key) == 0 then\r\n                    db.setStringValue(key, '')\r\n                end\r\n            end\r\n            table.sort(groupKeys, function(l, r) return l.label < r.label end)\r\n            groups[group] = groupKeys\r\n        end\r\n        table.sort(groupNames)\r\n        initDone = true\r\n    end\r\n\r\n    local recordMode\r\n    local selectedGroupIndex = 1\r\n    local selectedIndex = 1\r\n    local function selectEntry(_, newSelectedIndex)\r\n        recordMode = false\r\n        selectedIndex = newSelectedIndex\r\n    end\r\n\r\n    local function selectGroup(_, newSelectedGroupIndex)\r\n        recordMode = false\r\n        selectedGroupIndex = newSelectedGroupIndex\r\n    end\r\n\r\n    local function setRecordMode(_, newSelectedGroupIndex, newSelectedIndex)\r\n        recordMode = true\r\n        selectedGroupIndex = newSelectedGroupIndex\r\n        selectedIndex = newSelectedIndex\r\n        system.print('Please enter a ' .. valueType)\r\n    end\r\n\r\n    local function recordValue(_, text)\r\n        local setMethod, value\r\n        local result = true\r\n        if valueType == 'string' then\r\n            setMethod = db.setStringValue\r\n            value = text\r\n        elseif valueType == 'float' then\r\n            setMethod = db.setFloatValue\r\n            result, value = pcall(tonumber, text)\r\n        elseif valueType == 'int' then\r\n            setMethod = db.setIntValue\r\n            result, value = pcall(tonumber, text)\r\n        end\r\n\r\n        if result then\r\n            local groupName = groupNames[selectedGroupIndex]\r\n            local group = groups[groupName]\r\n            setMethod(group[selectedIndex].key, value)\r\n            recordMode = false\r\n            system.print('Databank value recorded')\r\n        else\r\n            system.print('Please enter a valid value')\r\n        end\r\n    end\r\n\r\n    local headers = { 'Label', 'Data' }\r\n    ---@param permit CoroutinePermit\r\n    local function refresh(permit)\r\n        if not initDone then\r\n            permit.yield()\r\n        end\r\n\r\n        ---@type string[][]\r\n        local rows = {}\r\n\r\n        local groupName = groupNames[selectedGroupIndex]\r\n        local group = groups[groupName]\r\n        for _, entry in ipairs(group) do\r\n            permit.acquire()\r\n            local value = db.getStringValue(entry.key)\r\n            local row = { entry.label, value }\r\n            table.insert(rows, row)\r\n        end\r\n\r\n        local data = FullDataHudData.new(title, headers, rows, groupNames)\r\n        hud.updateData(data)\r\n    end\r\n\r\n    ---@param newKeys table<string, DbEntry[]> | table<string, DbEntry[]>\r\n    function self.setKeys(newKeys)\r\n        keys = newKeys\r\n    end\r\n\r\n    ---@param state State\r\n    function self.start(state)\r\n        state.registerCoroutine(self, 'DatabankHud_init', initDb)\r\n        state.registerCoroutine(self, 'DatabankHud_refresh', refresh, true)\r\n\r\n        state.registerHandler(hud, FULL_DATA_HUD_EVENTS.DETAIL_ACTION_LEFT, setRecordMode)\r\n        state.registerHandler(hud, FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectEntry)\r\n        state.registerHandler(hud, FULL_DATA_HUD_EVENTS.GROUP_SELECTED, selectGroup)\r\n\r\n        state.registerHandler(system, SYSTEM_EVENTS.INPUT_TEXT, recordValue)\r\n    end\r\n\r\n    return setmetatable(self, DatabankHud)\r\nend\r\n\nend)\npackage.preload['du-crafting-hud:du_lib/data_hud/TalentLevelsDbHud.lua']=(function()\nrequire('du-crafting-hud:du_lib/requires/service.lua')\r\nrequire('du-crafting-hud:du_lib/general/DatabankHud.lua')\r\nrequire('du-crafting-hud:du_lib/data/Talents.lua')\r\n\r\n---@class TalentLevelsDbHud : Service\r\nTalentLevelsDbHud = {}\r\nTalentLevelsDbHud.__index = TalentLevelsDbHud\r\n\r\n---@param hud DatabankHud\r\n---@param talentsRepo TalentsRepo\r\n---@return TalentLevelsDbHud\r\nfunction TalentLevelsDbHud.new(hud, talentsRepo)\r\n    local self = --[[---@type self]] Service.new()\r\n\r\n    local init\r\n    ---@param talents table<string, Talent[]>\r\n    local function talentsRefresh(_, talents)\r\n        if init then\r\n            return\r\n        end\r\n\r\n        ---@type table<string, DbEntry[]>\r\n        local initKeys = {}\r\n        for group, groupTalents in pairs(talents) do\r\n            ---@type DbEntry[]\r\n            local groupKeys = {}\r\n            for _, talent in ipairs(groupTalents) do\r\n                local entry = DbEntry.new(talent.name)\r\n                table.insert(groupKeys, entry)\r\n            end\r\n            initKeys[group] = groupKeys\r\n        end\r\n        hud.setKeys(initKeys)\r\n        init = true\r\n    end\r\n\r\n    ---@param state State\r\n    function self.start(state)\r\n        state.registerHandler(talentsRepo, TALENTS_REPO_EVENTS.REFRESH, talentsRefresh)\r\n    end\r\n\r\n    return setmetatable(self, TalentLevelsDbHud)\r\nend\nend)\npackage.preload['du-crafting-hud:du_lib/data_hud/OresCostDbHud.lua']=(function()\nrequire('du-crafting-hud:du_lib/requires/service.lua')\r\nrequire('du-crafting-hud:du_lib/data/ItemGroups.lua')\r\nrequire('du-crafting-hud:du_lib/general/DatabankHud.lua')\r\n\r\n---@class OresCostDbHud : Service\r\nOresCostDbHud = {}\r\nOresCostDbHud.__index = OresCostDbHud\r\n\r\n---@param hud DatabankHud\r\n---@param system System\r\n---@return OresCostDbHud\r\nfunction OresCostDbHud.new(hud, system)\r\n    local self = --[[---@type self]] Service.new()\r\n\r\n    ---@param permit CoroutinePermit\r\n    local function init(permit)\r\n        permit.acquire()\r\n        local oresGroup = ItemGroup.findItemGroup(I_GROUP_ORE)\r\n\r\n        ---@type table<string, DbEntry[]>\r\n        local entries = {}\r\n        for group, oresGroup in pairs(oresGroup.groups) do\r\n            permit.acquire()\r\n            ---@type DbEntry[]\r\n            local groupEntries = {}\r\n            local groupItems = ItemGroup.getItemsInGroup(system, oresGroup, nil, nil)\r\n            for _, itemId in ipairs(groupItems) do\r\n                permit.acquire()\r\n                local item = system.getItem(itemId)\r\n                local entry = DbEntry.new(itemId, item.displayName)\r\n                table.insert(groupEntries, entry)\r\n            end\r\n            entries[group] = groupEntries\r\n        end\r\n\r\n        hud.setKeys(entries)\r\n    end\r\n\r\n    ---@param state State\r\n    function self.start(state)\r\n        state.registerCoroutine(self, 'OresCostDbHud_init', init)\r\n    end\r\n\r\n    return setmetatable(self, OresCostDbHud)\r\nend\nend)\npackage.preload['du-crafting-hud:du_lib/data_hud/SchematicsCostDbHud.lua']=(function()\nrequire('du-crafting-hud:du_lib/requires/service.lua')\r\nrequire('du-crafting-hud:du_lib/general/DatabankHud.lua')\r\nrequire('du-crafting-hud:du_lib/crafting/SchematicCopiesManager.lua')\r\n\r\n---@class SchematicsCostDbHud : Service\r\nSchematicsCostDbHud = {}\r\nSchematicsCostDbHud.__index = SchematicsCostDbHud\r\n\r\n---@param hud DatabankHud\r\n---@param system System\r\n---@return SchematicsCostDbHud\r\nfunction SchematicsCostDbHud.new(hud, system)\r\n    local self = --[[---@type self]] Service.new()\r\n\r\n    ---@param permit CoroutinePermit\r\n    local function init(permit)\r\n        ---@type DbEntry[]\r\n        local groupEntries = {}\r\n        ---@type table<string, DbEntry[]>\r\n        local entries = { ['Schematic Copies'] = groupEntries }\r\n        for _, itemId in ipairs(SchematicCopiesManager.SCHEMATIC_COPY_IDS) do\r\n            permit.acquire()\r\n            local item = system.getItem(itemId)\r\n            local entry = DbEntry.new(itemId, item.displayName)\r\n            table.insert(groupEntries, entry)\r\n        end\r\n\r\n        hud.setKeys(entries)\r\n    end\r\n\r\n    ---@param state State\r\n    function self.start(state)\r\n        state.registerCoroutine(self, 'SchematicsCostDbHud_init', init)\r\n    end\r\n\r\n    return setmetatable(self, SchematicsCostDbHud)\r\nend\nend)\npackage.preload['du-crafting-hud:CraftingHud/CraftingHud.lua']=(function()\nrequire('du-crafting-hud:du_lib/requires/service.lua')\r\nrequire('du-crafting-hud:du_lib/requires/dataHud.lua')\r\nrequire('du-crafting-hud:du_lib/crafting/CraftingCalculator.lua')\r\nrequire('du-crafting-hud:du_lib/data/ItemGroups.lua')\r\n\r\n---@class ItemGroupBreadcrumb\r\n---@field name string\r\n---@field groupNames string[]\r\n---@field groups ItemGroupBreadcrumb[]\r\n---@field itemIds number[]\r\n---@field itemNames string[]\r\n\r\n---@param name string\r\n---@param groups table<string, ItemGroup>\r\n---@param items number[] | nil\r\n---@param system System\r\n---@return ItemGroupBreadcrumb\r\nlocal function breadcrumb(name, groups, items, system)\r\n    ---@type ItemGroupBreadcrumb[]\r\n    local itemGroups\r\n    local groupNames\r\n    if groups then\r\n        itemGroups = {}\r\n        groupNames = {}\r\n        for name, group in pairs(groups) do\r\n            table.insert(groupNames, name)\r\n            table.insert(itemGroups, breadcrumb(name, group.groups, group.items, system))\r\n        end\r\n        table.sort(groupNames)\r\n        table.sort(itemGroups, function(l, r) return l.name < r.name end)\r\n    end\r\n\r\n    ---@type any[]\r\n    local itemsTmp\r\n    local itemNames, itemIds\r\n    if items then\r\n        itemsTmp = {}\r\n        for _, itemId in ipairs(--[[---@type number[] ]] items) do\r\n            local item = system.getItem(itemId)\r\n            table.insert(itemsTmp, item)\r\n        end\r\n        table.sort(itemsTmp, function(l, r) return l.displayNameWithSize < r.displayNameWithSize end)\r\n\r\n        itemIds = {}\r\n        itemNames = {}\r\n        for _, item in ipairs(itemsTmp) do\r\n            table.insert(itemIds, item.id)\r\n            table.insert(itemNames, item.displayNameWithSize)\r\n        end\r\n    end\r\n\r\n    return --[[---@type ItemGroupBreadcrumb]] {\r\n        name = name,\r\n        groupNames = groupNames,\r\n        groups = itemGroups,\r\n        itemIds = itemIds,\r\n        itemNames = itemNames\r\n    }\r\nend\r\n\r\n---@class CraftingHud : Service\r\nCraftingHud = {}\r\nCraftingHud.__index = CraftingHud\r\n\r\nlocal HEADERS = { 'Type', 'Item', 'Quantity', 'Cost', 'Industries' }\r\n\r\n---@param outputId number\r\n---@param outputQuantity number\r\n---@param outputCost number\r\n---@param outputIndustries number\r\n---@param byproducts table<number, CraftingCostItem>\r\n---@param ingredients table<number, CraftingCostItem>\r\n---@param schematics table<number, CraftingCostItem>\r\n---@param system System\r\n---@return string[][]\r\nlocal function renderCost(outputId, outputQuantity, outputCost, outputIndustries, byproducts, ingredients, schematics, system)\r\n    local item = system.getItem(outputId)\r\n    local blankRow = { '', '', '', '', '' }\r\n\r\n    local function numFormat(num)\r\n        local formatted = string.format('%.2f', num)\r\n        local k\r\n        while true do\r\n            formatted, k = string.gsub(formatted, \"^(-?%d+)(%d%d%d)\", '%1,%2')\r\n            if (k==0) then\r\n                break\r\n            end\r\n        end\r\n        return formatted\r\n    end\r\n\r\n    local rows = { }\r\n    local output = { 'Output', item.displayNameWithSize, numFormat(outputQuantity), numFormat(outputCost), numFormat(outputIndustries) }\r\n    table.insert(rows, output)\r\n    table.insert(rows, blankRow)\r\n\r\n    for ingredientId, ingredient in pairs(ingredients) do\r\n        local item = system.getItem(ingredientId)\r\n        local industries = '-'\r\n        if ingredient.industries then\r\n            industries = numFormat(ingredient.industries)\r\n        end\r\n        local ingredient = { 'Ingredients', item.displayNameWithSize, numFormat(ingredient.quantity),\r\n                             numFormat(ingredient.cost), industries }\r\n        table.insert(rows, ingredient)\r\n    end\r\n    table.insert(rows, blankRow)\r\n\r\n    local rowsSchematics = {}\r\n    table.insert(rowsSchematics, blankRow)\r\n    for schematicId, schematic in pairs(schematics) do\r\n        local item = system.getItem(schematicId)\r\n        local schematic = { 'Schematics', item.displayNameWithSize,\r\n                            numFormat(schematic.quantity), numFormat(schematic.cost), '-' }\r\n        table.insert(rowsSchematics, schematic)\r\n    end\r\n    if #rowsSchematics > 1 then\r\n        table.move(rowsSchematics, 1, #rowsSchematics, #rows + 1, rows)\r\n    end\r\n\r\n    local rowsByproducts = {}\r\n    table.insert(rowsByproducts, blankRow)\r\n    for byproductId, byproduct in pairs(byproducts) do\r\n        local item = system.getItem(byproductId)\r\n        local byproduct = { 'Byproducts', item.displayNameWithSize,\r\n                            numFormat(byproduct.quantity), numFormat(byproduct.cost), '-' }\r\n        table.insert(rowsByproducts, byproduct)\r\n    end\r\n    if #rowsByproducts > 1 then\r\n        table.move(rowsByproducts, 1, #rowsByproducts, #rows + 1, rows)\r\n    end\r\n\r\n    return rows\r\nend\r\n\r\nlocal BASE_HUD_TITLE = 'Crafting HUD'\r\n---@param system System\r\n---@param hud FullDataHud\r\n---@param craftingCalculator CraftingCalculator\r\n---@return CraftingHud\r\nfunction CraftingHud.new(system, hud, craftingCalculator)\r\n    local self = --[[---@type self]] Service.new()\r\n\r\n    local craftingCalculatorReady\r\n\r\n    local itemId\r\n    local previousItemId\r\n    ---@type 'day' | 'unit'\r\n    local calculationMode = 'unit'\r\n    local previousCalculationMode\r\n    ---@type CraftingCost\r\n    local craftingCost\r\n    ---@param permit CoroutinePermit\r\n    local function calculateCost(permit)\r\n        while not (craftingCalculatorReady and itemId) or (previousItemId == itemId and previousCalculationMode == calculationMode) do\r\n            permit.yield()\r\n        end\r\n        craftingCost = craftingCalculator.calculate(itemId, calculationMode,  permit)\r\n        previousItemId = itemId\r\n        previousCalculationMode = calculationMode\r\n    end\r\n\r\n    ---@type ItemGroupBreadcrumb[]\r\n    local breadcrumbs = { breadcrumb('All', ITEM_GROUPS, nil, system) }\r\n    local viewMode = 1\r\n    local function updateHud()\r\n        local title = BASE_HUD_TITLE\r\n        local rows\r\n        if craftingCost then\r\n            if viewMode == 1 then\r\n                --direct mode\r\n                title = title .. ' - Direct'\r\n                local directCost = craftingCost.directCost\r\n                rows = renderCost(craftingCost.itemId, craftingCost.quantity, craftingCost.totalCost, craftingCost.industries, directCost.byproducts,\r\n                        directCost.ingredients, directCost.schematics, system)\r\n            elseif viewMode == 2 then\r\n                --ores only mode\r\n                title = title .. ' - Ores Only'\r\n                local ingredients = craftingCost.ingredients\r\n                ---@type table<number, CraftingCostItem>\r\n                local ores = {}\r\n                local itemGroup = ItemGroup.findItemGroup(I_GROUP_ORE)\r\n                local oreIds = ItemGroup.getItemsInGroup(system, itemGroup, nil, nil)\r\n                for _, oreId in ipairs(oreIds) do\r\n                    local ore = ingredients[oreId]\r\n                    if ore then\r\n                        ores[oreId] = ore\r\n                    end\r\n                end\r\n                rows = renderCost(craftingCost.itemId, craftingCost.quantity, craftingCost.totalCost, craftingCost.industries, craftingCost.byproducts, ores,\r\n                        craftingCost.schematics, system)\r\n            elseif viewMode == 3 then\r\n                --full view mode\r\n                title = title .. ' - Full'\r\n                rows = renderCost(craftingCost.itemId, craftingCost.quantity, craftingCost.totalCost, craftingCost.industries, craftingCost.byproducts,\r\n                        craftingCost.ingredients, craftingCost.schematics, system)\r\n            end\r\n        end\r\n\r\n        local currentGroup = breadcrumbs[#breadcrumbs]\r\n        title = title .. ' - ' .. calculationMode:upper() .. ' - ' .. currentGroup.name\r\n\r\n        ---@type string[]\r\n        local groups = {}\r\n        if currentGroup.groupNames then\r\n            local groupNames = currentGroup.groupNames\r\n            table.move(groupNames, 1, #groupNames, #groups + 1, groups)\r\n        end\r\n\r\n        if currentGroup.itemNames then\r\n            local itemNames = currentGroup.itemNames\r\n            table.move(itemNames, 1, #itemNames, #groups + 1, groups)\r\n        end\r\n\r\n        local data = FullDataHudData.new(title, HEADERS, rows, groups)\r\n        hud.updateData(data)\r\n    end\r\n\r\n    local function setItemId(_, text)\r\n        itemId = tonumber(text)\r\n    end\r\n\r\n    local function craftingCalculatorInit()\r\n        craftingCalculatorReady = true\r\n    end\r\n\r\n    local function switchViewMode()\r\n        if viewMode > 2 then\r\n            viewMode = 1\r\n        else\r\n            viewMode = viewMode + 1\r\n        end\r\n    end\r\n\r\n    local function switchCalculationMode()\r\n        if calculationMode == 'unit' then\r\n            calculationMode = 'day'\r\n        else\r\n            calculationMode = 'unit'\r\n        end\r\n    end\r\n\r\n    local function onGroupActionLeft(_, _)\r\n        if #breadcrumbs > 1 then\r\n            table.remove(breadcrumbs, #breadcrumbs)\r\n            hud.setSelected(1, 1)\r\n        end\r\n    end\r\n\r\n    ---@param index number\r\n    local function onGroupActionRight(_, index)\r\n        local previous = breadcrumbs[#breadcrumbs]\r\n        local previousGroups = previous.groups\r\n        if previousGroups and index <= #previousGroups then\r\n            local current = previousGroups[index]\r\n            table.insert(breadcrumbs, current)\r\n            hud.setSelected(1, 1)\r\n\r\n            return\r\n        end\r\n\r\n        local previousItemIds = previous.itemIds\r\n        if previousItemIds then\r\n            itemId = previousItemIds[index]\r\n        end\r\n    end\r\n\r\n    ---@param state State\r\n    function self.start(state)\r\n        state.registerTimer('CraftingHud_updateHud', 0.2, updateHud)\r\n        state.registerCoroutine(self, 'CraftingHud_calculateCost', calculateCost, true)\r\n\r\n        state.registerHandler(hud, FULL_DATA_HUD_EVENTS.GROUP_ACTION_LEFT, onGroupActionLeft)\r\n        state.registerHandler(hud, FULL_DATA_HUD_EVENTS.GROUP_ACTION_RIGHT, onGroupActionRight)\r\n\r\n        state.registerHandler(craftingCalculator, CRAFTING_CALCULATOR_EVENT.INIT, craftingCalculatorInit)\r\n\r\n        state.registerHandler(system, SYSTEM_EVENTS.INPUT_TEXT, setItemId)\r\n        state.registerHandler(system, SYSTEM_EVENTS.ACTION_START, DuLuacUtils.createHandler({\r\n            [LUA_ACTIONS.OPTION3] = switchViewMode,\r\n            [LUA_ACTIONS.OPTION4] = switchCalculationMode\r\n        }))\r\n    end\r\n\r\n    return setmetatable(self, CraftingHud)\r\nend\nend)"},{"key":4,"filter":{"slotKey":-5,"signature":"onStart()","args":[]},"code":"library.addEventHandlers(library)\nlibrary.addEventHandlers(system)\nlibrary.addEventHandlers(player)\nlibrary.addEventHandlers(construct)\nlibrary.addEventHandlers(unit)\nlibrary.addEventHandlers(schemCostDb)\nlibrary.addEventHandlers(talentsDb)\nlibrary.addEventHandlers(oresCostDb)"},{"key":5,"filter":{"slotKey":-4,"signature":"onActionStart(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent('onActionStart',action)"},{"key":6,"filter":{"slotKey":-4,"signature":"onActionLoop(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent('onActionLoop',action)"},{"key":7,"filter":{"slotKey":-4,"signature":"onActionStop(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent('onActionStop',action)"},{"key":8,"filter":{"slotKey":-4,"signature":"onUpdate()","args":[]},"code":"system:triggerEvent('onUpdate')"},{"key":9,"filter":{"slotKey":-4,"signature":"onFlush()","args":[]},"code":"system:triggerEvent('onFlush')"},{"key":10,"filter":{"slotKey":-4,"signature":"onInputText(text)","args":[{"variable":"*"}]},"code":"system:triggerEvent('onInputText',text)"},{"key":11,"filter":{"slotKey":-4,"signature":"onCameraChanged(mode)","args":[{"variable":"*"}]},"code":"system:triggerEvent('onCameraChanged',mode)"},{"key":12,"filter":{"slotKey":-3,"signature":"onParentChanged(oldId,newId)","args":[{"variable":"*"},{"variable":"*"}]},"code":"player:triggerEvent('onParentChanged',oldId,newId)"},{"key":13,"filter":{"slotKey":-2,"signature":"onDocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onDocked',id)"},{"key":14,"filter":{"slotKey":-2,"signature":"onUndocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onUndocked',id)"},{"key":15,"filter":{"slotKey":-2,"signature":"onPlayerBoarded(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onPlayerBoarded',id)"},{"key":16,"filter":{"slotKey":-2,"signature":"onVRStationEntered(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onVRStationEntered',id)"},{"key":17,"filter":{"slotKey":-2,"signature":"onConstructDocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onConstructDocked',id)"},{"key":18,"filter":{"slotKey":-2,"signature":"onPvPTimer(active)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onPvPTimer',active)"},{"key":19,"filter":{"slotKey":-1,"signature":"onStop()","args":[]},"code":"unit:triggerEvent('onStop')"},{"key":20,"filter":{"slotKey":-1,"signature":"onTimer(timerId)","args":[{"variable":"*"}]},"code":"unit:triggerEvent('onTimer',timerId)"},{"key":21,"filter":{"slotKey":-1,"signature":"onStart()","args":[]},"code":"\n\nrequire('du-crafting-hud:du_lib/requires/stateManager.lua')\r\nrequire('du-crafting-hud:du_lib/data/Talents.lua')\r\nrequire('du-crafting-hud:du_lib/crafting/RecipeManager.lua')\r\nrequire('du-crafting-hud:du_lib/crafting/SchematicCopiesManager.lua')\r\nrequire('du-crafting-hud:du_lib/crafting/CraftingCalculator.lua')\r\nrequire('du-crafting-hud:du_lib/requires/dataHud.lua')\r\nrequire('du-crafting-hud:du_lib/general/DatabankHud.lua')\r\nrequire('du-crafting-hud:du_lib/data_hud/TalentLevelsDbHud.lua')\r\nrequire('du-crafting-hud:du_lib/data_hud/OresCostDbHud.lua')\r\nrequire('du-crafting-hud:du_lib/data_hud/SchematicsCostDbHud.lua')\r\n\r\nrequire('du-crafting-hud:CraftingHud/CraftingHud.lua')\r\n\r\n\r\n---@type number\r\nworkPerTick=1000--export: coroutine amount of work done per tick\n---@type number\r\nworkTickInterval=0.1--export: coroutine interval between ticks\n---@type number\r\ncontentFontSize=30--export: \n---@type number\r\nelementsByPage=15--export: \n---@type number\r\ngroupsByPage=10--export: \n\r\n\r\ntalentsDb = talentsDb\r\noresCostDb = oresCostDb\r\nschemCostDb = schemCostDb\r\n\r\n\r\n--Crafting Hud State\r\nlocal talentsRepo = TalentsRepo.new(system, talentsDb)\r\nlocal recipeManager = RecipeManager.new(system, talentsRepo)\r\nlocal schematicCopiesManager = SchematicCopiesManager.new(system, schemCostDb)\r\nlocal craftingCalculator = CraftingCalculator.new(system, recipeManager, schematicCopiesManager, oresCostDb)\r\n\r\nlocal dataHud = FullDataHud.new(system, contentFontSize, elementsByPage, groupsByPage)\r\nlocal craftingHud = CraftingHud.new(system, dataHud, craftingCalculator)\r\nlocal craftingHudState = State.new({ craftingHud, craftingCalculator, recipeManager, talentsRepo, schematicCopiesManager, dataHud },\r\n        unit, system, workPerTick, workTickInterval)\r\n\r\n\r\n--Talent Levels Db Hud State\r\nlocal dataHud = FullDataHud.new(system, contentFontSize, elementsByPage, groupsByPage)\r\nlocal dbHud = DatabankHud.new(system, talentsDb, 'int', dataHud, 'Talent Levels Db')\r\nlocal talentsDbHud = TalentLevelsDbHud.new(dbHud, talentsRepo)\r\nlocal talentsDbHudState = State.new({ talentsDbHud, talentsRepo, dbHud, dataHud },\r\n        unit, system, workPerTick, workTickInterval)\r\n\r\n\r\n--Ores Cost Db Hud State\r\nlocal dataHud = FullDataHud.new(system, contentFontSize, elementsByPage, groupsByPage)\r\nlocal dbHud = DatabankHud.new(system, oresCostDb, 'float', dataHud, 'Ores Cost Db')\r\nlocal oresDbHud = OresCostDbHud.new(dbHud, system)\r\nlocal oresDbHudState = State.new({ oresDbHud, dbHud, dataHud },\r\n        unit, system, workPerTick, workTickInterval)\r\n\r\n\r\n--Schematics Cost Db Hud State\r\nlocal dataHud = FullDataHud.new(system, contentFontSize, elementsByPage, groupsByPage)\r\nlocal dbHud = DatabankHud.new(system, schemCostDb, 'float', dataHud, 'Schematics Cost Db')\r\nlocal schemCostDbHud = SchematicsCostDbHud.new(dbHud, system)\r\nlocal schemCostDbHudState = State.new({ schemCostDbHud, dbHud, dataHud },\r\n        unit, system, workPerTick, workTickInterval)\r\n\r\n\r\nlocal states = { craftingHudState, talentsDbHudState, oresDbHudState, schemCostDbHudState }\r\nStateManager.new(states, system).start()"}],"events":[],"methods":[]}